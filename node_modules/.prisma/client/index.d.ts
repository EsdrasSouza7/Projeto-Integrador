
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Organizador
 * 
 */
export type Organizador = {
  id: number
  email: string
  senha: string
}

/**
 * Model Evento
 * 
 */
export type Evento = {
  id: number
  nomeEvento: string
  descricao: string | null
  organizadorEmail: string | null
}

/**
 * Model Perguntas
 * 
 */
export type Perguntas = {
  id: number
  pergunta: string
  eventoId: number | null
}

/**
 * Model Respostas
 * 
 */
export type Respostas = {
  id: number
  resposta: string
  perguntasId: number | null
}

/**
 * Model RespostaUsuario
 * 
 */
export type RespostaUsuario = {
  id: number
  usuarioId: number | null
  respostasId: number | null
  perguntasId: number | null
}

/**
 * Model Usuario
 * 
 */
export type Usuario = {
  id: number
  email: string
  senha: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Organizadors
 * const organizadors = await prisma.organizador.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Organizadors
   * const organizadors = await prisma.organizador.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.organizador`: Exposes CRUD operations for the **Organizador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizadors
    * const organizadors = await prisma.organizador.findMany()
    * ```
    */
  get organizador(): Prisma.OrganizadorDelegate<GlobalReject>;

  /**
   * `prisma.evento`: Exposes CRUD operations for the **Evento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Eventos
    * const eventos = await prisma.evento.findMany()
    * ```
    */
  get evento(): Prisma.EventoDelegate<GlobalReject>;

  /**
   * `prisma.perguntas`: Exposes CRUD operations for the **Perguntas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Perguntas
    * const perguntas = await prisma.perguntas.findMany()
    * ```
    */
  get perguntas(): Prisma.PerguntasDelegate<GlobalReject>;

  /**
   * `prisma.respostas`: Exposes CRUD operations for the **Respostas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Respostas
    * const respostas = await prisma.respostas.findMany()
    * ```
    */
  get respostas(): Prisma.RespostasDelegate<GlobalReject>;

  /**
   * `prisma.respostaUsuario`: Exposes CRUD operations for the **RespostaUsuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RespostaUsuarios
    * const respostaUsuarios = await prisma.respostaUsuario.findMany()
    * ```
    */
  get respostaUsuario(): Prisma.RespostaUsuarioDelegate<GlobalReject>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Organizador: 'Organizador',
    Evento: 'Evento',
    Perguntas: 'Perguntas',
    Respostas: 'Respostas',
    RespostaUsuario: 'RespostaUsuario',
    Usuario: 'Usuario'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrganizadorCountOutputType
   */


  export type OrganizadorCountOutputType = {
    evento: number
  }

  export type OrganizadorCountOutputTypeSelect = {
    evento?: boolean
  }

  export type OrganizadorCountOutputTypeGetPayload<S extends boolean | null | undefined | OrganizadorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OrganizadorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (OrganizadorCountOutputTypeArgs)
    ? OrganizadorCountOutputType 
    : S extends { select: any } & (OrganizadorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OrganizadorCountOutputType ? OrganizadorCountOutputType[P] : never
  } 
      : OrganizadorCountOutputType




  // Custom InputTypes

  /**
   * OrganizadorCountOutputType without action
   */
  export type OrganizadorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrganizadorCountOutputType
     */
    select?: OrganizadorCountOutputTypeSelect | null
  }



  /**
   * Count Type EventoCountOutputType
   */


  export type EventoCountOutputType = {
    pergunta: number
  }

  export type EventoCountOutputTypeSelect = {
    pergunta?: boolean
  }

  export type EventoCountOutputTypeGetPayload<S extends boolean | null | undefined | EventoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EventoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EventoCountOutputTypeArgs)
    ? EventoCountOutputType 
    : S extends { select: any } & (EventoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EventoCountOutputType ? EventoCountOutputType[P] : never
  } 
      : EventoCountOutputType




  // Custom InputTypes

  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EventoCountOutputType
     */
    select?: EventoCountOutputTypeSelect | null
  }



  /**
   * Count Type PerguntasCountOutputType
   */


  export type PerguntasCountOutputType = {
    respostaUsuario: number
    resposta: number
  }

  export type PerguntasCountOutputTypeSelect = {
    respostaUsuario?: boolean
    resposta?: boolean
  }

  export type PerguntasCountOutputTypeGetPayload<S extends boolean | null | undefined | PerguntasCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PerguntasCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PerguntasCountOutputTypeArgs)
    ? PerguntasCountOutputType 
    : S extends { select: any } & (PerguntasCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PerguntasCountOutputType ? PerguntasCountOutputType[P] : never
  } 
      : PerguntasCountOutputType




  // Custom InputTypes

  /**
   * PerguntasCountOutputType without action
   */
  export type PerguntasCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PerguntasCountOutputType
     */
    select?: PerguntasCountOutputTypeSelect | null
  }



  /**
   * Count Type RespostasCountOutputType
   */


  export type RespostasCountOutputType = {
    respostaUsuario: number
  }

  export type RespostasCountOutputTypeSelect = {
    respostaUsuario?: boolean
  }

  export type RespostasCountOutputTypeGetPayload<S extends boolean | null | undefined | RespostasCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RespostasCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RespostasCountOutputTypeArgs)
    ? RespostasCountOutputType 
    : S extends { select: any } & (RespostasCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RespostasCountOutputType ? RespostasCountOutputType[P] : never
  } 
      : RespostasCountOutputType




  // Custom InputTypes

  /**
   * RespostasCountOutputType without action
   */
  export type RespostasCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RespostasCountOutputType
     */
    select?: RespostasCountOutputTypeSelect | null
  }



  /**
   * Count Type UsuarioCountOutputType
   */


  export type UsuarioCountOutputType = {
    respostaUsuario: number
  }

  export type UsuarioCountOutputTypeSelect = {
    respostaUsuario?: boolean
  }

  export type UsuarioCountOutputTypeGetPayload<S extends boolean | null | undefined | UsuarioCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsuarioCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsuarioCountOutputTypeArgs)
    ? UsuarioCountOutputType 
    : S extends { select: any } & (UsuarioCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsuarioCountOutputType ? UsuarioCountOutputType[P] : never
  } 
      : UsuarioCountOutputType




  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Organizador
   */


  export type AggregateOrganizador = {
    _count: OrganizadorCountAggregateOutputType | null
    _avg: OrganizadorAvgAggregateOutputType | null
    _sum: OrganizadorSumAggregateOutputType | null
    _min: OrganizadorMinAggregateOutputType | null
    _max: OrganizadorMaxAggregateOutputType | null
  }

  export type OrganizadorAvgAggregateOutputType = {
    id: number | null
  }

  export type OrganizadorSumAggregateOutputType = {
    id: number | null
  }

  export type OrganizadorMinAggregateOutputType = {
    id: number | null
    email: string | null
    senha: string | null
  }

  export type OrganizadorMaxAggregateOutputType = {
    id: number | null
    email: string | null
    senha: string | null
  }

  export type OrganizadorCountAggregateOutputType = {
    id: number
    email: number
    senha: number
    _all: number
  }


  export type OrganizadorAvgAggregateInputType = {
    id?: true
  }

  export type OrganizadorSumAggregateInputType = {
    id?: true
  }

  export type OrganizadorMinAggregateInputType = {
    id?: true
    email?: true
    senha?: true
  }

  export type OrganizadorMaxAggregateInputType = {
    id?: true
    email?: true
    senha?: true
  }

  export type OrganizadorCountAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    _all?: true
  }

  export type OrganizadorAggregateArgs = {
    /**
     * Filter which Organizador to aggregate.
     */
    where?: OrganizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizadors to fetch.
     */
    orderBy?: Enumerable<OrganizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizadors
    **/
    _count?: true | OrganizadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizadorMaxAggregateInputType
  }

  export type GetOrganizadorAggregateType<T extends OrganizadorAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganizador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganizador[P]>
      : GetScalarType<T[P], AggregateOrganizador[P]>
  }




  export type OrganizadorGroupByArgs = {
    where?: OrganizadorWhereInput
    orderBy?: Enumerable<OrganizadorOrderByWithAggregationInput>
    by: OrganizadorScalarFieldEnum[]
    having?: OrganizadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizadorCountAggregateInputType | true
    _avg?: OrganizadorAvgAggregateInputType
    _sum?: OrganizadorSumAggregateInputType
    _min?: OrganizadorMinAggregateInputType
    _max?: OrganizadorMaxAggregateInputType
  }


  export type OrganizadorGroupByOutputType = {
    id: number
    email: string
    senha: string
    _count: OrganizadorCountAggregateOutputType | null
    _avg: OrganizadorAvgAggregateOutputType | null
    _sum: OrganizadorSumAggregateOutputType | null
    _min: OrganizadorMinAggregateOutputType | null
    _max: OrganizadorMaxAggregateOutputType | null
  }

  type GetOrganizadorGroupByPayload<T extends OrganizadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrganizadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizadorGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizadorGroupByOutputType[P]>
        }
      >
    >


  export type OrganizadorSelect = {
    id?: boolean
    email?: boolean
    senha?: boolean
    evento?: boolean | Organizador$eventoArgs
    _count?: boolean | OrganizadorCountOutputTypeArgs
  }


  export type OrganizadorInclude = {
    evento?: boolean | Organizador$eventoArgs
    _count?: boolean | OrganizadorCountOutputTypeArgs
  }

  export type OrganizadorGetPayload<S extends boolean | null | undefined | OrganizadorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Organizador :
    S extends undefined ? never :
    S extends { include: any } & (OrganizadorArgs | OrganizadorFindManyArgs)
    ? Organizador  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'evento' ? Array < EventoGetPayload<S['include'][P]>>  :
        P extends '_count' ? OrganizadorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (OrganizadorArgs | OrganizadorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'evento' ? Array < EventoGetPayload<S['select'][P]>>  :
        P extends '_count' ? OrganizadorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Organizador ? Organizador[P] : never
  } 
      : Organizador


  type OrganizadorCountArgs = 
    Omit<OrganizadorFindManyArgs, 'select' | 'include'> & {
      select?: OrganizadorCountAggregateInputType | true
    }

  export interface OrganizadorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Organizador that matches the filter.
     * @param {OrganizadorFindUniqueArgs} args - Arguments to find a Organizador
     * @example
     * // Get one Organizador
     * const organizador = await prisma.organizador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrganizadorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrganizadorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Organizador'> extends True ? Prisma__OrganizadorClient<OrganizadorGetPayload<T>> : Prisma__OrganizadorClient<OrganizadorGetPayload<T> | null, null>

    /**
     * Find one Organizador that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrganizadorFindUniqueOrThrowArgs} args - Arguments to find a Organizador
     * @example
     * // Get one Organizador
     * const organizador = await prisma.organizador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrganizadorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OrganizadorFindUniqueOrThrowArgs>
    ): Prisma__OrganizadorClient<OrganizadorGetPayload<T>>

    /**
     * Find the first Organizador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizadorFindFirstArgs} args - Arguments to find a Organizador
     * @example
     * // Get one Organizador
     * const organizador = await prisma.organizador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrganizadorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrganizadorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Organizador'> extends True ? Prisma__OrganizadorClient<OrganizadorGetPayload<T>> : Prisma__OrganizadorClient<OrganizadorGetPayload<T> | null, null>

    /**
     * Find the first Organizador that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizadorFindFirstOrThrowArgs} args - Arguments to find a Organizador
     * @example
     * // Get one Organizador
     * const organizador = await prisma.organizador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrganizadorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrganizadorFindFirstOrThrowArgs>
    ): Prisma__OrganizadorClient<OrganizadorGetPayload<T>>

    /**
     * Find zero or more Organizadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizadorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizadors
     * const organizadors = await prisma.organizador.findMany()
     * 
     * // Get first 10 Organizadors
     * const organizadors = await prisma.organizador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizadorWithIdOnly = await prisma.organizador.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrganizadorFindManyArgs>(
      args?: SelectSubset<T, OrganizadorFindManyArgs>
    ): Prisma.PrismaPromise<Array<OrganizadorGetPayload<T>>>

    /**
     * Create a Organizador.
     * @param {OrganizadorCreateArgs} args - Arguments to create a Organizador.
     * @example
     * // Create one Organizador
     * const Organizador = await prisma.organizador.create({
     *   data: {
     *     // ... data to create a Organizador
     *   }
     * })
     * 
    **/
    create<T extends OrganizadorCreateArgs>(
      args: SelectSubset<T, OrganizadorCreateArgs>
    ): Prisma__OrganizadorClient<OrganizadorGetPayload<T>>

    /**
     * Create many Organizadors.
     *     @param {OrganizadorCreateManyArgs} args - Arguments to create many Organizadors.
     *     @example
     *     // Create many Organizadors
     *     const organizador = await prisma.organizador.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrganizadorCreateManyArgs>(
      args?: SelectSubset<T, OrganizadorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Organizador.
     * @param {OrganizadorDeleteArgs} args - Arguments to delete one Organizador.
     * @example
     * // Delete one Organizador
     * const Organizador = await prisma.organizador.delete({
     *   where: {
     *     // ... filter to delete one Organizador
     *   }
     * })
     * 
    **/
    delete<T extends OrganizadorDeleteArgs>(
      args: SelectSubset<T, OrganizadorDeleteArgs>
    ): Prisma__OrganizadorClient<OrganizadorGetPayload<T>>

    /**
     * Update one Organizador.
     * @param {OrganizadorUpdateArgs} args - Arguments to update one Organizador.
     * @example
     * // Update one Organizador
     * const organizador = await prisma.organizador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganizadorUpdateArgs>(
      args: SelectSubset<T, OrganizadorUpdateArgs>
    ): Prisma__OrganizadorClient<OrganizadorGetPayload<T>>

    /**
     * Delete zero or more Organizadors.
     * @param {OrganizadorDeleteManyArgs} args - Arguments to filter Organizadors to delete.
     * @example
     * // Delete a few Organizadors
     * const { count } = await prisma.organizador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganizadorDeleteManyArgs>(
      args?: SelectSubset<T, OrganizadorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizadors
     * const organizador = await prisma.organizador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganizadorUpdateManyArgs>(
      args: SelectSubset<T, OrganizadorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Organizador.
     * @param {OrganizadorUpsertArgs} args - Arguments to update or create a Organizador.
     * @example
     * // Update or create a Organizador
     * const organizador = await prisma.organizador.upsert({
     *   create: {
     *     // ... data to create a Organizador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organizador we want to update
     *   }
     * })
    **/
    upsert<T extends OrganizadorUpsertArgs>(
      args: SelectSubset<T, OrganizadorUpsertArgs>
    ): Prisma__OrganizadorClient<OrganizadorGetPayload<T>>

    /**
     * Count the number of Organizadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizadorCountArgs} args - Arguments to filter Organizadors to count.
     * @example
     * // Count the number of Organizadors
     * const count = await prisma.organizador.count({
     *   where: {
     *     // ... the filter for the Organizadors we want to count
     *   }
     * })
    **/
    count<T extends OrganizadorCountArgs>(
      args?: Subset<T, OrganizadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organizador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizadorAggregateArgs>(args: Subset<T, OrganizadorAggregateArgs>): Prisma.PrismaPromise<GetOrganizadorAggregateType<T>>

    /**
     * Group by Organizador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizadorGroupByArgs['orderBy'] }
        : { orderBy?: OrganizadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Organizador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrganizadorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    evento<T extends Organizador$eventoArgs= {}>(args?: Subset<T, Organizador$eventoArgs>): Prisma.PrismaPromise<Array<EventoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Organizador base type for findUnique actions
   */
  export type OrganizadorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Organizador
     */
    select?: OrganizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizadorInclude | null
    /**
     * Filter, which Organizador to fetch.
     */
    where: OrganizadorWhereUniqueInput
  }

  /**
   * Organizador findUnique
   */
  export interface OrganizadorFindUniqueArgs extends OrganizadorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organizador findUniqueOrThrow
   */
  export type OrganizadorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Organizador
     */
    select?: OrganizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizadorInclude | null
    /**
     * Filter, which Organizador to fetch.
     */
    where: OrganizadorWhereUniqueInput
  }


  /**
   * Organizador base type for findFirst actions
   */
  export type OrganizadorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Organizador
     */
    select?: OrganizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizadorInclude | null
    /**
     * Filter, which Organizador to fetch.
     */
    where?: OrganizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizadors to fetch.
     */
    orderBy?: Enumerable<OrganizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizadors.
     */
    cursor?: OrganizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizadors.
     */
    distinct?: Enumerable<OrganizadorScalarFieldEnum>
  }

  /**
   * Organizador findFirst
   */
  export interface OrganizadorFindFirstArgs extends OrganizadorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organizador findFirstOrThrow
   */
  export type OrganizadorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Organizador
     */
    select?: OrganizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizadorInclude | null
    /**
     * Filter, which Organizador to fetch.
     */
    where?: OrganizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizadors to fetch.
     */
    orderBy?: Enumerable<OrganizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizadors.
     */
    cursor?: OrganizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizadors.
     */
    distinct?: Enumerable<OrganizadorScalarFieldEnum>
  }


  /**
   * Organizador findMany
   */
  export type OrganizadorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Organizador
     */
    select?: OrganizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizadorInclude | null
    /**
     * Filter, which Organizadors to fetch.
     */
    where?: OrganizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizadors to fetch.
     */
    orderBy?: Enumerable<OrganizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizadors.
     */
    cursor?: OrganizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizadors.
     */
    skip?: number
    distinct?: Enumerable<OrganizadorScalarFieldEnum>
  }


  /**
   * Organizador create
   */
  export type OrganizadorCreateArgs = {
    /**
     * Select specific fields to fetch from the Organizador
     */
    select?: OrganizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizadorInclude | null
    /**
     * The data needed to create a Organizador.
     */
    data: XOR<OrganizadorCreateInput, OrganizadorUncheckedCreateInput>
  }


  /**
   * Organizador createMany
   */
  export type OrganizadorCreateManyArgs = {
    /**
     * The data used to create many Organizadors.
     */
    data: Enumerable<OrganizadorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Organizador update
   */
  export type OrganizadorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Organizador
     */
    select?: OrganizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizadorInclude | null
    /**
     * The data needed to update a Organizador.
     */
    data: XOR<OrganizadorUpdateInput, OrganizadorUncheckedUpdateInput>
    /**
     * Choose, which Organizador to update.
     */
    where: OrganizadorWhereUniqueInput
  }


  /**
   * Organizador updateMany
   */
  export type OrganizadorUpdateManyArgs = {
    /**
     * The data used to update Organizadors.
     */
    data: XOR<OrganizadorUpdateManyMutationInput, OrganizadorUncheckedUpdateManyInput>
    /**
     * Filter which Organizadors to update
     */
    where?: OrganizadorWhereInput
  }


  /**
   * Organizador upsert
   */
  export type OrganizadorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Organizador
     */
    select?: OrganizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizadorInclude | null
    /**
     * The filter to search for the Organizador to update in case it exists.
     */
    where: OrganizadorWhereUniqueInput
    /**
     * In case the Organizador found by the `where` argument doesn't exist, create a new Organizador with this data.
     */
    create: XOR<OrganizadorCreateInput, OrganizadorUncheckedCreateInput>
    /**
     * In case the Organizador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizadorUpdateInput, OrganizadorUncheckedUpdateInput>
  }


  /**
   * Organizador delete
   */
  export type OrganizadorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Organizador
     */
    select?: OrganizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizadorInclude | null
    /**
     * Filter which Organizador to delete.
     */
    where: OrganizadorWhereUniqueInput
  }


  /**
   * Organizador deleteMany
   */
  export type OrganizadorDeleteManyArgs = {
    /**
     * Filter which Organizadors to delete
     */
    where?: OrganizadorWhereInput
  }


  /**
   * Organizador.evento
   */
  export type Organizador$eventoArgs = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude | null
    where?: EventoWhereInput
    orderBy?: Enumerable<EventoOrderByWithRelationInput>
    cursor?: EventoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EventoScalarFieldEnum>
  }


  /**
   * Organizador without action
   */
  export type OrganizadorArgs = {
    /**
     * Select specific fields to fetch from the Organizador
     */
    select?: OrganizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizadorInclude | null
  }



  /**
   * Model Evento
   */


  export type AggregateEvento = {
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  export type EventoAvgAggregateOutputType = {
    id: number | null
  }

  export type EventoSumAggregateOutputType = {
    id: number | null
  }

  export type EventoMinAggregateOutputType = {
    id: number | null
    nomeEvento: string | null
    descricao: string | null
    organizadorEmail: string | null
  }

  export type EventoMaxAggregateOutputType = {
    id: number | null
    nomeEvento: string | null
    descricao: string | null
    organizadorEmail: string | null
  }

  export type EventoCountAggregateOutputType = {
    id: number
    nomeEvento: number
    descricao: number
    organizadorEmail: number
    _all: number
  }


  export type EventoAvgAggregateInputType = {
    id?: true
  }

  export type EventoSumAggregateInputType = {
    id?: true
  }

  export type EventoMinAggregateInputType = {
    id?: true
    nomeEvento?: true
    descricao?: true
    organizadorEmail?: true
  }

  export type EventoMaxAggregateInputType = {
    id?: true
    nomeEvento?: true
    descricao?: true
    organizadorEmail?: true
  }

  export type EventoCountAggregateInputType = {
    id?: true
    nomeEvento?: true
    descricao?: true
    organizadorEmail?: true
    _all?: true
  }

  export type EventoAggregateArgs = {
    /**
     * Filter which Evento to aggregate.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: Enumerable<EventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Eventos
    **/
    _count?: true | EventoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventoMaxAggregateInputType
  }

  export type GetEventoAggregateType<T extends EventoAggregateArgs> = {
        [P in keyof T & keyof AggregateEvento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvento[P]>
      : GetScalarType<T[P], AggregateEvento[P]>
  }




  export type EventoGroupByArgs = {
    where?: EventoWhereInput
    orderBy?: Enumerable<EventoOrderByWithAggregationInput>
    by: EventoScalarFieldEnum[]
    having?: EventoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventoCountAggregateInputType | true
    _avg?: EventoAvgAggregateInputType
    _sum?: EventoSumAggregateInputType
    _min?: EventoMinAggregateInputType
    _max?: EventoMaxAggregateInputType
  }


  export type EventoGroupByOutputType = {
    id: number
    nomeEvento: string
    descricao: string | null
    organizadorEmail: string | null
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  type GetEventoGroupByPayload<T extends EventoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EventoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventoGroupByOutputType[P]>
            : GetScalarType<T[P], EventoGroupByOutputType[P]>
        }
      >
    >


  export type EventoSelect = {
    id?: boolean
    nomeEvento?: boolean
    descricao?: boolean
    organizadorEmail?: boolean
    pergunta?: boolean | Evento$perguntaArgs
    Organizador?: boolean | OrganizadorArgs
    _count?: boolean | EventoCountOutputTypeArgs
  }


  export type EventoInclude = {
    pergunta?: boolean | Evento$perguntaArgs
    Organizador?: boolean | OrganizadorArgs
    _count?: boolean | EventoCountOutputTypeArgs
  }

  export type EventoGetPayload<S extends boolean | null | undefined | EventoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Evento :
    S extends undefined ? never :
    S extends { include: any } & (EventoArgs | EventoFindManyArgs)
    ? Evento  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'pergunta' ? Array < PerguntasGetPayload<S['include'][P]>>  :
        P extends 'Organizador' ? OrganizadorGetPayload<S['include'][P]> | null :
        P extends '_count' ? EventoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EventoArgs | EventoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'pergunta' ? Array < PerguntasGetPayload<S['select'][P]>>  :
        P extends 'Organizador' ? OrganizadorGetPayload<S['select'][P]> | null :
        P extends '_count' ? EventoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Evento ? Evento[P] : never
  } 
      : Evento


  type EventoCountArgs = 
    Omit<EventoFindManyArgs, 'select' | 'include'> & {
      select?: EventoCountAggregateInputType | true
    }

  export interface EventoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Evento that matches the filter.
     * @param {EventoFindUniqueArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EventoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Evento'> extends True ? Prisma__EventoClient<EventoGetPayload<T>> : Prisma__EventoClient<EventoGetPayload<T> | null, null>

    /**
     * Find one Evento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventoFindUniqueOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EventoFindUniqueOrThrowArgs>
    ): Prisma__EventoClient<EventoGetPayload<T>>

    /**
     * Find the first Evento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EventoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Evento'> extends True ? Prisma__EventoClient<EventoGetPayload<T>> : Prisma__EventoClient<EventoGetPayload<T> | null, null>

    /**
     * Find the first Evento that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EventoFindFirstOrThrowArgs>
    ): Prisma__EventoClient<EventoGetPayload<T>>

    /**
     * Find zero or more Eventos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Eventos
     * const eventos = await prisma.evento.findMany()
     * 
     * // Get first 10 Eventos
     * const eventos = await prisma.evento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventoWithIdOnly = await prisma.evento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventoFindManyArgs>(
      args?: SelectSubset<T, EventoFindManyArgs>
    ): Prisma.PrismaPromise<Array<EventoGetPayload<T>>>

    /**
     * Create a Evento.
     * @param {EventoCreateArgs} args - Arguments to create a Evento.
     * @example
     * // Create one Evento
     * const Evento = await prisma.evento.create({
     *   data: {
     *     // ... data to create a Evento
     *   }
     * })
     * 
    **/
    create<T extends EventoCreateArgs>(
      args: SelectSubset<T, EventoCreateArgs>
    ): Prisma__EventoClient<EventoGetPayload<T>>

    /**
     * Create many Eventos.
     *     @param {EventoCreateManyArgs} args - Arguments to create many Eventos.
     *     @example
     *     // Create many Eventos
     *     const evento = await prisma.evento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventoCreateManyArgs>(
      args?: SelectSubset<T, EventoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Evento.
     * @param {EventoDeleteArgs} args - Arguments to delete one Evento.
     * @example
     * // Delete one Evento
     * const Evento = await prisma.evento.delete({
     *   where: {
     *     // ... filter to delete one Evento
     *   }
     * })
     * 
    **/
    delete<T extends EventoDeleteArgs>(
      args: SelectSubset<T, EventoDeleteArgs>
    ): Prisma__EventoClient<EventoGetPayload<T>>

    /**
     * Update one Evento.
     * @param {EventoUpdateArgs} args - Arguments to update one Evento.
     * @example
     * // Update one Evento
     * const evento = await prisma.evento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventoUpdateArgs>(
      args: SelectSubset<T, EventoUpdateArgs>
    ): Prisma__EventoClient<EventoGetPayload<T>>

    /**
     * Delete zero or more Eventos.
     * @param {EventoDeleteManyArgs} args - Arguments to filter Eventos to delete.
     * @example
     * // Delete a few Eventos
     * const { count } = await prisma.evento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventoDeleteManyArgs>(
      args?: SelectSubset<T, EventoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Eventos
     * const evento = await prisma.evento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventoUpdateManyArgs>(
      args: SelectSubset<T, EventoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Evento.
     * @param {EventoUpsertArgs} args - Arguments to update or create a Evento.
     * @example
     * // Update or create a Evento
     * const evento = await prisma.evento.upsert({
     *   create: {
     *     // ... data to create a Evento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Evento we want to update
     *   }
     * })
    **/
    upsert<T extends EventoUpsertArgs>(
      args: SelectSubset<T, EventoUpsertArgs>
    ): Prisma__EventoClient<EventoGetPayload<T>>

    /**
     * Count the number of Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoCountArgs} args - Arguments to filter Eventos to count.
     * @example
     * // Count the number of Eventos
     * const count = await prisma.evento.count({
     *   where: {
     *     // ... the filter for the Eventos we want to count
     *   }
     * })
    **/
    count<T extends EventoCountArgs>(
      args?: Subset<T, EventoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventoAggregateArgs>(args: Subset<T, EventoAggregateArgs>): Prisma.PrismaPromise<GetEventoAggregateType<T>>

    /**
     * Group by Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventoGroupByArgs['orderBy'] }
        : { orderBy?: EventoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Evento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EventoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    pergunta<T extends Evento$perguntaArgs= {}>(args?: Subset<T, Evento$perguntaArgs>): Prisma.PrismaPromise<Array<PerguntasGetPayload<T>>| Null>;

    Organizador<T extends OrganizadorArgs= {}>(args?: Subset<T, OrganizadorArgs>): Prisma__OrganizadorClient<OrganizadorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Evento base type for findUnique actions
   */
  export type EventoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento findUnique
   */
  export interface EventoFindUniqueArgs extends EventoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Evento findUniqueOrThrow
   */
  export type EventoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }


  /**
   * Evento base type for findFirst actions
   */
  export type EventoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: Enumerable<EventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: Enumerable<EventoScalarFieldEnum>
  }

  /**
   * Evento findFirst
   */
  export interface EventoFindFirstArgs extends EventoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Evento findFirstOrThrow
   */
  export type EventoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: Enumerable<EventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: Enumerable<EventoScalarFieldEnum>
  }


  /**
   * Evento findMany
   */
  export type EventoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude | null
    /**
     * Filter, which Eventos to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: Enumerable<EventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    distinct?: Enumerable<EventoScalarFieldEnum>
  }


  /**
   * Evento create
   */
  export type EventoCreateArgs = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude | null
    /**
     * The data needed to create a Evento.
     */
    data: XOR<EventoCreateInput, EventoUncheckedCreateInput>
  }


  /**
   * Evento createMany
   */
  export type EventoCreateManyArgs = {
    /**
     * The data used to create many Eventos.
     */
    data: Enumerable<EventoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Evento update
   */
  export type EventoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude | null
    /**
     * The data needed to update a Evento.
     */
    data: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
    /**
     * Choose, which Evento to update.
     */
    where: EventoWhereUniqueInput
  }


  /**
   * Evento updateMany
   */
  export type EventoUpdateManyArgs = {
    /**
     * The data used to update Eventos.
     */
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyInput>
    /**
     * Filter which Eventos to update
     */
    where?: EventoWhereInput
  }


  /**
   * Evento upsert
   */
  export type EventoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude | null
    /**
     * The filter to search for the Evento to update in case it exists.
     */
    where: EventoWhereUniqueInput
    /**
     * In case the Evento found by the `where` argument doesn't exist, create a new Evento with this data.
     */
    create: XOR<EventoCreateInput, EventoUncheckedCreateInput>
    /**
     * In case the Evento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
  }


  /**
   * Evento delete
   */
  export type EventoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude | null
    /**
     * Filter which Evento to delete.
     */
    where: EventoWhereUniqueInput
  }


  /**
   * Evento deleteMany
   */
  export type EventoDeleteManyArgs = {
    /**
     * Filter which Eventos to delete
     */
    where?: EventoWhereInput
  }


  /**
   * Evento.pergunta
   */
  export type Evento$perguntaArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PerguntasInclude | null
    where?: PerguntasWhereInput
    orderBy?: Enumerable<PerguntasOrderByWithRelationInput>
    cursor?: PerguntasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PerguntasScalarFieldEnum>
  }


  /**
   * Evento without action
   */
  export type EventoArgs = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude | null
  }



  /**
   * Model Perguntas
   */


  export type AggregatePerguntas = {
    _count: PerguntasCountAggregateOutputType | null
    _avg: PerguntasAvgAggregateOutputType | null
    _sum: PerguntasSumAggregateOutputType | null
    _min: PerguntasMinAggregateOutputType | null
    _max: PerguntasMaxAggregateOutputType | null
  }

  export type PerguntasAvgAggregateOutputType = {
    id: number | null
    eventoId: number | null
  }

  export type PerguntasSumAggregateOutputType = {
    id: number | null
    eventoId: number | null
  }

  export type PerguntasMinAggregateOutputType = {
    id: number | null
    pergunta: string | null
    eventoId: number | null
  }

  export type PerguntasMaxAggregateOutputType = {
    id: number | null
    pergunta: string | null
    eventoId: number | null
  }

  export type PerguntasCountAggregateOutputType = {
    id: number
    pergunta: number
    eventoId: number
    _all: number
  }


  export type PerguntasAvgAggregateInputType = {
    id?: true
    eventoId?: true
  }

  export type PerguntasSumAggregateInputType = {
    id?: true
    eventoId?: true
  }

  export type PerguntasMinAggregateInputType = {
    id?: true
    pergunta?: true
    eventoId?: true
  }

  export type PerguntasMaxAggregateInputType = {
    id?: true
    pergunta?: true
    eventoId?: true
  }

  export type PerguntasCountAggregateInputType = {
    id?: true
    pergunta?: true
    eventoId?: true
    _all?: true
  }

  export type PerguntasAggregateArgs = {
    /**
     * Filter which Perguntas to aggregate.
     */
    where?: PerguntasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perguntas to fetch.
     */
    orderBy?: Enumerable<PerguntasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerguntasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perguntas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perguntas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Perguntas
    **/
    _count?: true | PerguntasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PerguntasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PerguntasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerguntasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerguntasMaxAggregateInputType
  }

  export type GetPerguntasAggregateType<T extends PerguntasAggregateArgs> = {
        [P in keyof T & keyof AggregatePerguntas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerguntas[P]>
      : GetScalarType<T[P], AggregatePerguntas[P]>
  }




  export type PerguntasGroupByArgs = {
    where?: PerguntasWhereInput
    orderBy?: Enumerable<PerguntasOrderByWithAggregationInput>
    by: PerguntasScalarFieldEnum[]
    having?: PerguntasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerguntasCountAggregateInputType | true
    _avg?: PerguntasAvgAggregateInputType
    _sum?: PerguntasSumAggregateInputType
    _min?: PerguntasMinAggregateInputType
    _max?: PerguntasMaxAggregateInputType
  }


  export type PerguntasGroupByOutputType = {
    id: number
    pergunta: string
    eventoId: number | null
    _count: PerguntasCountAggregateOutputType | null
    _avg: PerguntasAvgAggregateOutputType | null
    _sum: PerguntasSumAggregateOutputType | null
    _min: PerguntasMinAggregateOutputType | null
    _max: PerguntasMaxAggregateOutputType | null
  }

  type GetPerguntasGroupByPayload<T extends PerguntasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PerguntasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerguntasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerguntasGroupByOutputType[P]>
            : GetScalarType<T[P], PerguntasGroupByOutputType[P]>
        }
      >
    >


  export type PerguntasSelect = {
    id?: boolean
    pergunta?: boolean
    eventoId?: boolean
    respostaUsuario?: boolean | Perguntas$respostaUsuarioArgs
    resposta?: boolean | Perguntas$respostaArgs
    Evento?: boolean | EventoArgs
    _count?: boolean | PerguntasCountOutputTypeArgs
  }


  export type PerguntasInclude = {
    respostaUsuario?: boolean | Perguntas$respostaUsuarioArgs
    resposta?: boolean | Perguntas$respostaArgs
    Evento?: boolean | EventoArgs
    _count?: boolean | PerguntasCountOutputTypeArgs
  }

  export type PerguntasGetPayload<S extends boolean | null | undefined | PerguntasArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Perguntas :
    S extends undefined ? never :
    S extends { include: any } & (PerguntasArgs | PerguntasFindManyArgs)
    ? Perguntas  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'respostaUsuario' ? Array < RespostaUsuarioGetPayload<S['include'][P]>>  :
        P extends 'resposta' ? Array < RespostasGetPayload<S['include'][P]>>  :
        P extends 'Evento' ? EventoGetPayload<S['include'][P]> | null :
        P extends '_count' ? PerguntasCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PerguntasArgs | PerguntasFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'respostaUsuario' ? Array < RespostaUsuarioGetPayload<S['select'][P]>>  :
        P extends 'resposta' ? Array < RespostasGetPayload<S['select'][P]>>  :
        P extends 'Evento' ? EventoGetPayload<S['select'][P]> | null :
        P extends '_count' ? PerguntasCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Perguntas ? Perguntas[P] : never
  } 
      : Perguntas


  type PerguntasCountArgs = 
    Omit<PerguntasFindManyArgs, 'select' | 'include'> & {
      select?: PerguntasCountAggregateInputType | true
    }

  export interface PerguntasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Perguntas that matches the filter.
     * @param {PerguntasFindUniqueArgs} args - Arguments to find a Perguntas
     * @example
     * // Get one Perguntas
     * const perguntas = await prisma.perguntas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PerguntasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PerguntasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Perguntas'> extends True ? Prisma__PerguntasClient<PerguntasGetPayload<T>> : Prisma__PerguntasClient<PerguntasGetPayload<T> | null, null>

    /**
     * Find one Perguntas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PerguntasFindUniqueOrThrowArgs} args - Arguments to find a Perguntas
     * @example
     * // Get one Perguntas
     * const perguntas = await prisma.perguntas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PerguntasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PerguntasFindUniqueOrThrowArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Find the first Perguntas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasFindFirstArgs} args - Arguments to find a Perguntas
     * @example
     * // Get one Perguntas
     * const perguntas = await prisma.perguntas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PerguntasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PerguntasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Perguntas'> extends True ? Prisma__PerguntasClient<PerguntasGetPayload<T>> : Prisma__PerguntasClient<PerguntasGetPayload<T> | null, null>

    /**
     * Find the first Perguntas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasFindFirstOrThrowArgs} args - Arguments to find a Perguntas
     * @example
     * // Get one Perguntas
     * const perguntas = await prisma.perguntas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PerguntasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PerguntasFindFirstOrThrowArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Find zero or more Perguntas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Perguntas
     * const perguntas = await prisma.perguntas.findMany()
     * 
     * // Get first 10 Perguntas
     * const perguntas = await prisma.perguntas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const perguntasWithIdOnly = await prisma.perguntas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PerguntasFindManyArgs>(
      args?: SelectSubset<T, PerguntasFindManyArgs>
    ): Prisma.PrismaPromise<Array<PerguntasGetPayload<T>>>

    /**
     * Create a Perguntas.
     * @param {PerguntasCreateArgs} args - Arguments to create a Perguntas.
     * @example
     * // Create one Perguntas
     * const Perguntas = await prisma.perguntas.create({
     *   data: {
     *     // ... data to create a Perguntas
     *   }
     * })
     * 
    **/
    create<T extends PerguntasCreateArgs>(
      args: SelectSubset<T, PerguntasCreateArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Create many Perguntas.
     *     @param {PerguntasCreateManyArgs} args - Arguments to create many Perguntas.
     *     @example
     *     // Create many Perguntas
     *     const perguntas = await prisma.perguntas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PerguntasCreateManyArgs>(
      args?: SelectSubset<T, PerguntasCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Perguntas.
     * @param {PerguntasDeleteArgs} args - Arguments to delete one Perguntas.
     * @example
     * // Delete one Perguntas
     * const Perguntas = await prisma.perguntas.delete({
     *   where: {
     *     // ... filter to delete one Perguntas
     *   }
     * })
     * 
    **/
    delete<T extends PerguntasDeleteArgs>(
      args: SelectSubset<T, PerguntasDeleteArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Update one Perguntas.
     * @param {PerguntasUpdateArgs} args - Arguments to update one Perguntas.
     * @example
     * // Update one Perguntas
     * const perguntas = await prisma.perguntas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PerguntasUpdateArgs>(
      args: SelectSubset<T, PerguntasUpdateArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Delete zero or more Perguntas.
     * @param {PerguntasDeleteManyArgs} args - Arguments to filter Perguntas to delete.
     * @example
     * // Delete a few Perguntas
     * const { count } = await prisma.perguntas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PerguntasDeleteManyArgs>(
      args?: SelectSubset<T, PerguntasDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Perguntas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Perguntas
     * const perguntas = await prisma.perguntas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PerguntasUpdateManyArgs>(
      args: SelectSubset<T, PerguntasUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Perguntas.
     * @param {PerguntasUpsertArgs} args - Arguments to update or create a Perguntas.
     * @example
     * // Update or create a Perguntas
     * const perguntas = await prisma.perguntas.upsert({
     *   create: {
     *     // ... data to create a Perguntas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Perguntas we want to update
     *   }
     * })
    **/
    upsert<T extends PerguntasUpsertArgs>(
      args: SelectSubset<T, PerguntasUpsertArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Count the number of Perguntas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasCountArgs} args - Arguments to filter Perguntas to count.
     * @example
     * // Count the number of Perguntas
     * const count = await prisma.perguntas.count({
     *   where: {
     *     // ... the filter for the Perguntas we want to count
     *   }
     * })
    **/
    count<T extends PerguntasCountArgs>(
      args?: Subset<T, PerguntasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerguntasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Perguntas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerguntasAggregateArgs>(args: Subset<T, PerguntasAggregateArgs>): Prisma.PrismaPromise<GetPerguntasAggregateType<T>>

    /**
     * Group by Perguntas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerguntasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerguntasGroupByArgs['orderBy'] }
        : { orderBy?: PerguntasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerguntasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerguntasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Perguntas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PerguntasClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    respostaUsuario<T extends Perguntas$respostaUsuarioArgs= {}>(args?: Subset<T, Perguntas$respostaUsuarioArgs>): Prisma.PrismaPromise<Array<RespostaUsuarioGetPayload<T>>| Null>;

    resposta<T extends Perguntas$respostaArgs= {}>(args?: Subset<T, Perguntas$respostaArgs>): Prisma.PrismaPromise<Array<RespostasGetPayload<T>>| Null>;

    Evento<T extends EventoArgs= {}>(args?: Subset<T, EventoArgs>): Prisma__EventoClient<EventoGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Perguntas base type for findUnique actions
   */
  export type PerguntasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PerguntasInclude | null
    /**
     * Filter, which Perguntas to fetch.
     */
    where: PerguntasWhereUniqueInput
  }

  /**
   * Perguntas findUnique
   */
  export interface PerguntasFindUniqueArgs extends PerguntasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Perguntas findUniqueOrThrow
   */
  export type PerguntasFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PerguntasInclude | null
    /**
     * Filter, which Perguntas to fetch.
     */
    where: PerguntasWhereUniqueInput
  }


  /**
   * Perguntas base type for findFirst actions
   */
  export type PerguntasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PerguntasInclude | null
    /**
     * Filter, which Perguntas to fetch.
     */
    where?: PerguntasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perguntas to fetch.
     */
    orderBy?: Enumerable<PerguntasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Perguntas.
     */
    cursor?: PerguntasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perguntas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perguntas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Perguntas.
     */
    distinct?: Enumerable<PerguntasScalarFieldEnum>
  }

  /**
   * Perguntas findFirst
   */
  export interface PerguntasFindFirstArgs extends PerguntasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Perguntas findFirstOrThrow
   */
  export type PerguntasFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PerguntasInclude | null
    /**
     * Filter, which Perguntas to fetch.
     */
    where?: PerguntasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perguntas to fetch.
     */
    orderBy?: Enumerable<PerguntasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Perguntas.
     */
    cursor?: PerguntasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perguntas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perguntas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Perguntas.
     */
    distinct?: Enumerable<PerguntasScalarFieldEnum>
  }


  /**
   * Perguntas findMany
   */
  export type PerguntasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PerguntasInclude | null
    /**
     * Filter, which Perguntas to fetch.
     */
    where?: PerguntasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perguntas to fetch.
     */
    orderBy?: Enumerable<PerguntasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Perguntas.
     */
    cursor?: PerguntasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perguntas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perguntas.
     */
    skip?: number
    distinct?: Enumerable<PerguntasScalarFieldEnum>
  }


  /**
   * Perguntas create
   */
  export type PerguntasCreateArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PerguntasInclude | null
    /**
     * The data needed to create a Perguntas.
     */
    data: XOR<PerguntasCreateInput, PerguntasUncheckedCreateInput>
  }


  /**
   * Perguntas createMany
   */
  export type PerguntasCreateManyArgs = {
    /**
     * The data used to create many Perguntas.
     */
    data: Enumerable<PerguntasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Perguntas update
   */
  export type PerguntasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PerguntasInclude | null
    /**
     * The data needed to update a Perguntas.
     */
    data: XOR<PerguntasUpdateInput, PerguntasUncheckedUpdateInput>
    /**
     * Choose, which Perguntas to update.
     */
    where: PerguntasWhereUniqueInput
  }


  /**
   * Perguntas updateMany
   */
  export type PerguntasUpdateManyArgs = {
    /**
     * The data used to update Perguntas.
     */
    data: XOR<PerguntasUpdateManyMutationInput, PerguntasUncheckedUpdateManyInput>
    /**
     * Filter which Perguntas to update
     */
    where?: PerguntasWhereInput
  }


  /**
   * Perguntas upsert
   */
  export type PerguntasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PerguntasInclude | null
    /**
     * The filter to search for the Perguntas to update in case it exists.
     */
    where: PerguntasWhereUniqueInput
    /**
     * In case the Perguntas found by the `where` argument doesn't exist, create a new Perguntas with this data.
     */
    create: XOR<PerguntasCreateInput, PerguntasUncheckedCreateInput>
    /**
     * In case the Perguntas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerguntasUpdateInput, PerguntasUncheckedUpdateInput>
  }


  /**
   * Perguntas delete
   */
  export type PerguntasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PerguntasInclude | null
    /**
     * Filter which Perguntas to delete.
     */
    where: PerguntasWhereUniqueInput
  }


  /**
   * Perguntas deleteMany
   */
  export type PerguntasDeleteManyArgs = {
    /**
     * Filter which Perguntas to delete
     */
    where?: PerguntasWhereInput
  }


  /**
   * Perguntas.respostaUsuario
   */
  export type Perguntas$respostaUsuarioArgs = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    where?: RespostaUsuarioWhereInput
    orderBy?: Enumerable<RespostaUsuarioOrderByWithRelationInput>
    cursor?: RespostaUsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RespostaUsuarioScalarFieldEnum>
  }


  /**
   * Perguntas.resposta
   */
  export type Perguntas$respostaArgs = {
    /**
     * Select specific fields to fetch from the Respostas
     */
    select?: RespostasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostasInclude | null
    where?: RespostasWhereInput
    orderBy?: Enumerable<RespostasOrderByWithRelationInput>
    cursor?: RespostasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RespostasScalarFieldEnum>
  }


  /**
   * Perguntas without action
   */
  export type PerguntasArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PerguntasInclude | null
  }



  /**
   * Model Respostas
   */


  export type AggregateRespostas = {
    _count: RespostasCountAggregateOutputType | null
    _avg: RespostasAvgAggregateOutputType | null
    _sum: RespostasSumAggregateOutputType | null
    _min: RespostasMinAggregateOutputType | null
    _max: RespostasMaxAggregateOutputType | null
  }

  export type RespostasAvgAggregateOutputType = {
    id: number | null
    perguntasId: number | null
  }

  export type RespostasSumAggregateOutputType = {
    id: number | null
    perguntasId: number | null
  }

  export type RespostasMinAggregateOutputType = {
    id: number | null
    resposta: string | null
    perguntasId: number | null
  }

  export type RespostasMaxAggregateOutputType = {
    id: number | null
    resposta: string | null
    perguntasId: number | null
  }

  export type RespostasCountAggregateOutputType = {
    id: number
    resposta: number
    perguntasId: number
    _all: number
  }


  export type RespostasAvgAggregateInputType = {
    id?: true
    perguntasId?: true
  }

  export type RespostasSumAggregateInputType = {
    id?: true
    perguntasId?: true
  }

  export type RespostasMinAggregateInputType = {
    id?: true
    resposta?: true
    perguntasId?: true
  }

  export type RespostasMaxAggregateInputType = {
    id?: true
    resposta?: true
    perguntasId?: true
  }

  export type RespostasCountAggregateInputType = {
    id?: true
    resposta?: true
    perguntasId?: true
    _all?: true
  }

  export type RespostasAggregateArgs = {
    /**
     * Filter which Respostas to aggregate.
     */
    where?: RespostasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Respostas to fetch.
     */
    orderBy?: Enumerable<RespostasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RespostasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Respostas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Respostas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Respostas
    **/
    _count?: true | RespostasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RespostasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RespostasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RespostasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RespostasMaxAggregateInputType
  }

  export type GetRespostasAggregateType<T extends RespostasAggregateArgs> = {
        [P in keyof T & keyof AggregateRespostas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRespostas[P]>
      : GetScalarType<T[P], AggregateRespostas[P]>
  }




  export type RespostasGroupByArgs = {
    where?: RespostasWhereInput
    orderBy?: Enumerable<RespostasOrderByWithAggregationInput>
    by: RespostasScalarFieldEnum[]
    having?: RespostasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RespostasCountAggregateInputType | true
    _avg?: RespostasAvgAggregateInputType
    _sum?: RespostasSumAggregateInputType
    _min?: RespostasMinAggregateInputType
    _max?: RespostasMaxAggregateInputType
  }


  export type RespostasGroupByOutputType = {
    id: number
    resposta: string
    perguntasId: number | null
    _count: RespostasCountAggregateOutputType | null
    _avg: RespostasAvgAggregateOutputType | null
    _sum: RespostasSumAggregateOutputType | null
    _min: RespostasMinAggregateOutputType | null
    _max: RespostasMaxAggregateOutputType | null
  }

  type GetRespostasGroupByPayload<T extends RespostasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RespostasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RespostasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RespostasGroupByOutputType[P]>
            : GetScalarType<T[P], RespostasGroupByOutputType[P]>
        }
      >
    >


  export type RespostasSelect = {
    id?: boolean
    resposta?: boolean
    perguntasId?: boolean
    respostaUsuario?: boolean | Respostas$respostaUsuarioArgs
    Perguntas?: boolean | PerguntasArgs
    _count?: boolean | RespostasCountOutputTypeArgs
  }


  export type RespostasInclude = {
    respostaUsuario?: boolean | Respostas$respostaUsuarioArgs
    Perguntas?: boolean | PerguntasArgs
    _count?: boolean | RespostasCountOutputTypeArgs
  }

  export type RespostasGetPayload<S extends boolean | null | undefined | RespostasArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Respostas :
    S extends undefined ? never :
    S extends { include: any } & (RespostasArgs | RespostasFindManyArgs)
    ? Respostas  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'respostaUsuario' ? Array < RespostaUsuarioGetPayload<S['include'][P]>>  :
        P extends 'Perguntas' ? PerguntasGetPayload<S['include'][P]> | null :
        P extends '_count' ? RespostasCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RespostasArgs | RespostasFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'respostaUsuario' ? Array < RespostaUsuarioGetPayload<S['select'][P]>>  :
        P extends 'Perguntas' ? PerguntasGetPayload<S['select'][P]> | null :
        P extends '_count' ? RespostasCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Respostas ? Respostas[P] : never
  } 
      : Respostas


  type RespostasCountArgs = 
    Omit<RespostasFindManyArgs, 'select' | 'include'> & {
      select?: RespostasCountAggregateInputType | true
    }

  export interface RespostasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Respostas that matches the filter.
     * @param {RespostasFindUniqueArgs} args - Arguments to find a Respostas
     * @example
     * // Get one Respostas
     * const respostas = await prisma.respostas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RespostasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RespostasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Respostas'> extends True ? Prisma__RespostasClient<RespostasGetPayload<T>> : Prisma__RespostasClient<RespostasGetPayload<T> | null, null>

    /**
     * Find one Respostas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RespostasFindUniqueOrThrowArgs} args - Arguments to find a Respostas
     * @example
     * // Get one Respostas
     * const respostas = await prisma.respostas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RespostasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RespostasFindUniqueOrThrowArgs>
    ): Prisma__RespostasClient<RespostasGetPayload<T>>

    /**
     * Find the first Respostas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostasFindFirstArgs} args - Arguments to find a Respostas
     * @example
     * // Get one Respostas
     * const respostas = await prisma.respostas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RespostasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RespostasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Respostas'> extends True ? Prisma__RespostasClient<RespostasGetPayload<T>> : Prisma__RespostasClient<RespostasGetPayload<T> | null, null>

    /**
     * Find the first Respostas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostasFindFirstOrThrowArgs} args - Arguments to find a Respostas
     * @example
     * // Get one Respostas
     * const respostas = await prisma.respostas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RespostasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RespostasFindFirstOrThrowArgs>
    ): Prisma__RespostasClient<RespostasGetPayload<T>>

    /**
     * Find zero or more Respostas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Respostas
     * const respostas = await prisma.respostas.findMany()
     * 
     * // Get first 10 Respostas
     * const respostas = await prisma.respostas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const respostasWithIdOnly = await prisma.respostas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RespostasFindManyArgs>(
      args?: SelectSubset<T, RespostasFindManyArgs>
    ): Prisma.PrismaPromise<Array<RespostasGetPayload<T>>>

    /**
     * Create a Respostas.
     * @param {RespostasCreateArgs} args - Arguments to create a Respostas.
     * @example
     * // Create one Respostas
     * const Respostas = await prisma.respostas.create({
     *   data: {
     *     // ... data to create a Respostas
     *   }
     * })
     * 
    **/
    create<T extends RespostasCreateArgs>(
      args: SelectSubset<T, RespostasCreateArgs>
    ): Prisma__RespostasClient<RespostasGetPayload<T>>

    /**
     * Create many Respostas.
     *     @param {RespostasCreateManyArgs} args - Arguments to create many Respostas.
     *     @example
     *     // Create many Respostas
     *     const respostas = await prisma.respostas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RespostasCreateManyArgs>(
      args?: SelectSubset<T, RespostasCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Respostas.
     * @param {RespostasDeleteArgs} args - Arguments to delete one Respostas.
     * @example
     * // Delete one Respostas
     * const Respostas = await prisma.respostas.delete({
     *   where: {
     *     // ... filter to delete one Respostas
     *   }
     * })
     * 
    **/
    delete<T extends RespostasDeleteArgs>(
      args: SelectSubset<T, RespostasDeleteArgs>
    ): Prisma__RespostasClient<RespostasGetPayload<T>>

    /**
     * Update one Respostas.
     * @param {RespostasUpdateArgs} args - Arguments to update one Respostas.
     * @example
     * // Update one Respostas
     * const respostas = await prisma.respostas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RespostasUpdateArgs>(
      args: SelectSubset<T, RespostasUpdateArgs>
    ): Prisma__RespostasClient<RespostasGetPayload<T>>

    /**
     * Delete zero or more Respostas.
     * @param {RespostasDeleteManyArgs} args - Arguments to filter Respostas to delete.
     * @example
     * // Delete a few Respostas
     * const { count } = await prisma.respostas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RespostasDeleteManyArgs>(
      args?: SelectSubset<T, RespostasDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Respostas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Respostas
     * const respostas = await prisma.respostas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RespostasUpdateManyArgs>(
      args: SelectSubset<T, RespostasUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Respostas.
     * @param {RespostasUpsertArgs} args - Arguments to update or create a Respostas.
     * @example
     * // Update or create a Respostas
     * const respostas = await prisma.respostas.upsert({
     *   create: {
     *     // ... data to create a Respostas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Respostas we want to update
     *   }
     * })
    **/
    upsert<T extends RespostasUpsertArgs>(
      args: SelectSubset<T, RespostasUpsertArgs>
    ): Prisma__RespostasClient<RespostasGetPayload<T>>

    /**
     * Count the number of Respostas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostasCountArgs} args - Arguments to filter Respostas to count.
     * @example
     * // Count the number of Respostas
     * const count = await prisma.respostas.count({
     *   where: {
     *     // ... the filter for the Respostas we want to count
     *   }
     * })
    **/
    count<T extends RespostasCountArgs>(
      args?: Subset<T, RespostasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RespostasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Respostas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RespostasAggregateArgs>(args: Subset<T, RespostasAggregateArgs>): Prisma.PrismaPromise<GetRespostasAggregateType<T>>

    /**
     * Group by Respostas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RespostasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RespostasGroupByArgs['orderBy'] }
        : { orderBy?: RespostasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RespostasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRespostasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Respostas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RespostasClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    respostaUsuario<T extends Respostas$respostaUsuarioArgs= {}>(args?: Subset<T, Respostas$respostaUsuarioArgs>): Prisma.PrismaPromise<Array<RespostaUsuarioGetPayload<T>>| Null>;

    Perguntas<T extends PerguntasArgs= {}>(args?: Subset<T, PerguntasArgs>): Prisma__PerguntasClient<PerguntasGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Respostas base type for findUnique actions
   */
  export type RespostasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Respostas
     */
    select?: RespostasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostasInclude | null
    /**
     * Filter, which Respostas to fetch.
     */
    where: RespostasWhereUniqueInput
  }

  /**
   * Respostas findUnique
   */
  export interface RespostasFindUniqueArgs extends RespostasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Respostas findUniqueOrThrow
   */
  export type RespostasFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Respostas
     */
    select?: RespostasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostasInclude | null
    /**
     * Filter, which Respostas to fetch.
     */
    where: RespostasWhereUniqueInput
  }


  /**
   * Respostas base type for findFirst actions
   */
  export type RespostasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Respostas
     */
    select?: RespostasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostasInclude | null
    /**
     * Filter, which Respostas to fetch.
     */
    where?: RespostasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Respostas to fetch.
     */
    orderBy?: Enumerable<RespostasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Respostas.
     */
    cursor?: RespostasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Respostas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Respostas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Respostas.
     */
    distinct?: Enumerable<RespostasScalarFieldEnum>
  }

  /**
   * Respostas findFirst
   */
  export interface RespostasFindFirstArgs extends RespostasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Respostas findFirstOrThrow
   */
  export type RespostasFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Respostas
     */
    select?: RespostasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostasInclude | null
    /**
     * Filter, which Respostas to fetch.
     */
    where?: RespostasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Respostas to fetch.
     */
    orderBy?: Enumerable<RespostasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Respostas.
     */
    cursor?: RespostasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Respostas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Respostas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Respostas.
     */
    distinct?: Enumerable<RespostasScalarFieldEnum>
  }


  /**
   * Respostas findMany
   */
  export type RespostasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Respostas
     */
    select?: RespostasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostasInclude | null
    /**
     * Filter, which Respostas to fetch.
     */
    where?: RespostasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Respostas to fetch.
     */
    orderBy?: Enumerable<RespostasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Respostas.
     */
    cursor?: RespostasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Respostas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Respostas.
     */
    skip?: number
    distinct?: Enumerable<RespostasScalarFieldEnum>
  }


  /**
   * Respostas create
   */
  export type RespostasCreateArgs = {
    /**
     * Select specific fields to fetch from the Respostas
     */
    select?: RespostasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostasInclude | null
    /**
     * The data needed to create a Respostas.
     */
    data: XOR<RespostasCreateInput, RespostasUncheckedCreateInput>
  }


  /**
   * Respostas createMany
   */
  export type RespostasCreateManyArgs = {
    /**
     * The data used to create many Respostas.
     */
    data: Enumerable<RespostasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Respostas update
   */
  export type RespostasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Respostas
     */
    select?: RespostasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostasInclude | null
    /**
     * The data needed to update a Respostas.
     */
    data: XOR<RespostasUpdateInput, RespostasUncheckedUpdateInput>
    /**
     * Choose, which Respostas to update.
     */
    where: RespostasWhereUniqueInput
  }


  /**
   * Respostas updateMany
   */
  export type RespostasUpdateManyArgs = {
    /**
     * The data used to update Respostas.
     */
    data: XOR<RespostasUpdateManyMutationInput, RespostasUncheckedUpdateManyInput>
    /**
     * Filter which Respostas to update
     */
    where?: RespostasWhereInput
  }


  /**
   * Respostas upsert
   */
  export type RespostasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Respostas
     */
    select?: RespostasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostasInclude | null
    /**
     * The filter to search for the Respostas to update in case it exists.
     */
    where: RespostasWhereUniqueInput
    /**
     * In case the Respostas found by the `where` argument doesn't exist, create a new Respostas with this data.
     */
    create: XOR<RespostasCreateInput, RespostasUncheckedCreateInput>
    /**
     * In case the Respostas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RespostasUpdateInput, RespostasUncheckedUpdateInput>
  }


  /**
   * Respostas delete
   */
  export type RespostasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Respostas
     */
    select?: RespostasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostasInclude | null
    /**
     * Filter which Respostas to delete.
     */
    where: RespostasWhereUniqueInput
  }


  /**
   * Respostas deleteMany
   */
  export type RespostasDeleteManyArgs = {
    /**
     * Filter which Respostas to delete
     */
    where?: RespostasWhereInput
  }


  /**
   * Respostas.respostaUsuario
   */
  export type Respostas$respostaUsuarioArgs = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    where?: RespostaUsuarioWhereInput
    orderBy?: Enumerable<RespostaUsuarioOrderByWithRelationInput>
    cursor?: RespostaUsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RespostaUsuarioScalarFieldEnum>
  }


  /**
   * Respostas without action
   */
  export type RespostasArgs = {
    /**
     * Select specific fields to fetch from the Respostas
     */
    select?: RespostasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostasInclude | null
  }



  /**
   * Model RespostaUsuario
   */


  export type AggregateRespostaUsuario = {
    _count: RespostaUsuarioCountAggregateOutputType | null
    _avg: RespostaUsuarioAvgAggregateOutputType | null
    _sum: RespostaUsuarioSumAggregateOutputType | null
    _min: RespostaUsuarioMinAggregateOutputType | null
    _max: RespostaUsuarioMaxAggregateOutputType | null
  }

  export type RespostaUsuarioAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    respostasId: number | null
    perguntasId: number | null
  }

  export type RespostaUsuarioSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    respostasId: number | null
    perguntasId: number | null
  }

  export type RespostaUsuarioMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    respostasId: number | null
    perguntasId: number | null
  }

  export type RespostaUsuarioMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    respostasId: number | null
    perguntasId: number | null
  }

  export type RespostaUsuarioCountAggregateOutputType = {
    id: number
    usuarioId: number
    respostasId: number
    perguntasId: number
    _all: number
  }


  export type RespostaUsuarioAvgAggregateInputType = {
    id?: true
    usuarioId?: true
    respostasId?: true
    perguntasId?: true
  }

  export type RespostaUsuarioSumAggregateInputType = {
    id?: true
    usuarioId?: true
    respostasId?: true
    perguntasId?: true
  }

  export type RespostaUsuarioMinAggregateInputType = {
    id?: true
    usuarioId?: true
    respostasId?: true
    perguntasId?: true
  }

  export type RespostaUsuarioMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    respostasId?: true
    perguntasId?: true
  }

  export type RespostaUsuarioCountAggregateInputType = {
    id?: true
    usuarioId?: true
    respostasId?: true
    perguntasId?: true
    _all?: true
  }

  export type RespostaUsuarioAggregateArgs = {
    /**
     * Filter which RespostaUsuario to aggregate.
     */
    where?: RespostaUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RespostaUsuarios to fetch.
     */
    orderBy?: Enumerable<RespostaUsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RespostaUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RespostaUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RespostaUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RespostaUsuarios
    **/
    _count?: true | RespostaUsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RespostaUsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RespostaUsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RespostaUsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RespostaUsuarioMaxAggregateInputType
  }

  export type GetRespostaUsuarioAggregateType<T extends RespostaUsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateRespostaUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRespostaUsuario[P]>
      : GetScalarType<T[P], AggregateRespostaUsuario[P]>
  }




  export type RespostaUsuarioGroupByArgs = {
    where?: RespostaUsuarioWhereInput
    orderBy?: Enumerable<RespostaUsuarioOrderByWithAggregationInput>
    by: RespostaUsuarioScalarFieldEnum[]
    having?: RespostaUsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RespostaUsuarioCountAggregateInputType | true
    _avg?: RespostaUsuarioAvgAggregateInputType
    _sum?: RespostaUsuarioSumAggregateInputType
    _min?: RespostaUsuarioMinAggregateInputType
    _max?: RespostaUsuarioMaxAggregateInputType
  }


  export type RespostaUsuarioGroupByOutputType = {
    id: number
    usuarioId: number | null
    respostasId: number | null
    perguntasId: number | null
    _count: RespostaUsuarioCountAggregateOutputType | null
    _avg: RespostaUsuarioAvgAggregateOutputType | null
    _sum: RespostaUsuarioSumAggregateOutputType | null
    _min: RespostaUsuarioMinAggregateOutputType | null
    _max: RespostaUsuarioMaxAggregateOutputType | null
  }

  type GetRespostaUsuarioGroupByPayload<T extends RespostaUsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RespostaUsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RespostaUsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RespostaUsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], RespostaUsuarioGroupByOutputType[P]>
        }
      >
    >


  export type RespostaUsuarioSelect = {
    id?: boolean
    usuarioId?: boolean
    respostasId?: boolean
    perguntasId?: boolean
    Usuario?: boolean | UsuarioArgs
    Respostas?: boolean | RespostasArgs
    Perguntas?: boolean | PerguntasArgs
  }


  export type RespostaUsuarioInclude = {
    Usuario?: boolean | UsuarioArgs
    Respostas?: boolean | RespostasArgs
    Perguntas?: boolean | PerguntasArgs
  }

  export type RespostaUsuarioGetPayload<S extends boolean | null | undefined | RespostaUsuarioArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RespostaUsuario :
    S extends undefined ? never :
    S extends { include: any } & (RespostaUsuarioArgs | RespostaUsuarioFindManyArgs)
    ? RespostaUsuario  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Usuario' ? UsuarioGetPayload<S['include'][P]> | null :
        P extends 'Respostas' ? RespostasGetPayload<S['include'][P]> | null :
        P extends 'Perguntas' ? PerguntasGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (RespostaUsuarioArgs | RespostaUsuarioFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Usuario' ? UsuarioGetPayload<S['select'][P]> | null :
        P extends 'Respostas' ? RespostasGetPayload<S['select'][P]> | null :
        P extends 'Perguntas' ? PerguntasGetPayload<S['select'][P]> | null :  P extends keyof RespostaUsuario ? RespostaUsuario[P] : never
  } 
      : RespostaUsuario


  type RespostaUsuarioCountArgs = 
    Omit<RespostaUsuarioFindManyArgs, 'select' | 'include'> & {
      select?: RespostaUsuarioCountAggregateInputType | true
    }

  export interface RespostaUsuarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one RespostaUsuario that matches the filter.
     * @param {RespostaUsuarioFindUniqueArgs} args - Arguments to find a RespostaUsuario
     * @example
     * // Get one RespostaUsuario
     * const respostaUsuario = await prisma.respostaUsuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RespostaUsuarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RespostaUsuarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RespostaUsuario'> extends True ? Prisma__RespostaUsuarioClient<RespostaUsuarioGetPayload<T>> : Prisma__RespostaUsuarioClient<RespostaUsuarioGetPayload<T> | null, null>

    /**
     * Find one RespostaUsuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RespostaUsuarioFindUniqueOrThrowArgs} args - Arguments to find a RespostaUsuario
     * @example
     * // Get one RespostaUsuario
     * const respostaUsuario = await prisma.respostaUsuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RespostaUsuarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RespostaUsuarioFindUniqueOrThrowArgs>
    ): Prisma__RespostaUsuarioClient<RespostaUsuarioGetPayload<T>>

    /**
     * Find the first RespostaUsuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostaUsuarioFindFirstArgs} args - Arguments to find a RespostaUsuario
     * @example
     * // Get one RespostaUsuario
     * const respostaUsuario = await prisma.respostaUsuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RespostaUsuarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RespostaUsuarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RespostaUsuario'> extends True ? Prisma__RespostaUsuarioClient<RespostaUsuarioGetPayload<T>> : Prisma__RespostaUsuarioClient<RespostaUsuarioGetPayload<T> | null, null>

    /**
     * Find the first RespostaUsuario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostaUsuarioFindFirstOrThrowArgs} args - Arguments to find a RespostaUsuario
     * @example
     * // Get one RespostaUsuario
     * const respostaUsuario = await prisma.respostaUsuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RespostaUsuarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RespostaUsuarioFindFirstOrThrowArgs>
    ): Prisma__RespostaUsuarioClient<RespostaUsuarioGetPayload<T>>

    /**
     * Find zero or more RespostaUsuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostaUsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RespostaUsuarios
     * const respostaUsuarios = await prisma.respostaUsuario.findMany()
     * 
     * // Get first 10 RespostaUsuarios
     * const respostaUsuarios = await prisma.respostaUsuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const respostaUsuarioWithIdOnly = await prisma.respostaUsuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RespostaUsuarioFindManyArgs>(
      args?: SelectSubset<T, RespostaUsuarioFindManyArgs>
    ): Prisma.PrismaPromise<Array<RespostaUsuarioGetPayload<T>>>

    /**
     * Create a RespostaUsuario.
     * @param {RespostaUsuarioCreateArgs} args - Arguments to create a RespostaUsuario.
     * @example
     * // Create one RespostaUsuario
     * const RespostaUsuario = await prisma.respostaUsuario.create({
     *   data: {
     *     // ... data to create a RespostaUsuario
     *   }
     * })
     * 
    **/
    create<T extends RespostaUsuarioCreateArgs>(
      args: SelectSubset<T, RespostaUsuarioCreateArgs>
    ): Prisma__RespostaUsuarioClient<RespostaUsuarioGetPayload<T>>

    /**
     * Create many RespostaUsuarios.
     *     @param {RespostaUsuarioCreateManyArgs} args - Arguments to create many RespostaUsuarios.
     *     @example
     *     // Create many RespostaUsuarios
     *     const respostaUsuario = await prisma.respostaUsuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RespostaUsuarioCreateManyArgs>(
      args?: SelectSubset<T, RespostaUsuarioCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RespostaUsuario.
     * @param {RespostaUsuarioDeleteArgs} args - Arguments to delete one RespostaUsuario.
     * @example
     * // Delete one RespostaUsuario
     * const RespostaUsuario = await prisma.respostaUsuario.delete({
     *   where: {
     *     // ... filter to delete one RespostaUsuario
     *   }
     * })
     * 
    **/
    delete<T extends RespostaUsuarioDeleteArgs>(
      args: SelectSubset<T, RespostaUsuarioDeleteArgs>
    ): Prisma__RespostaUsuarioClient<RespostaUsuarioGetPayload<T>>

    /**
     * Update one RespostaUsuario.
     * @param {RespostaUsuarioUpdateArgs} args - Arguments to update one RespostaUsuario.
     * @example
     * // Update one RespostaUsuario
     * const respostaUsuario = await prisma.respostaUsuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RespostaUsuarioUpdateArgs>(
      args: SelectSubset<T, RespostaUsuarioUpdateArgs>
    ): Prisma__RespostaUsuarioClient<RespostaUsuarioGetPayload<T>>

    /**
     * Delete zero or more RespostaUsuarios.
     * @param {RespostaUsuarioDeleteManyArgs} args - Arguments to filter RespostaUsuarios to delete.
     * @example
     * // Delete a few RespostaUsuarios
     * const { count } = await prisma.respostaUsuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RespostaUsuarioDeleteManyArgs>(
      args?: SelectSubset<T, RespostaUsuarioDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RespostaUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostaUsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RespostaUsuarios
     * const respostaUsuario = await prisma.respostaUsuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RespostaUsuarioUpdateManyArgs>(
      args: SelectSubset<T, RespostaUsuarioUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RespostaUsuario.
     * @param {RespostaUsuarioUpsertArgs} args - Arguments to update or create a RespostaUsuario.
     * @example
     * // Update or create a RespostaUsuario
     * const respostaUsuario = await prisma.respostaUsuario.upsert({
     *   create: {
     *     // ... data to create a RespostaUsuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RespostaUsuario we want to update
     *   }
     * })
    **/
    upsert<T extends RespostaUsuarioUpsertArgs>(
      args: SelectSubset<T, RespostaUsuarioUpsertArgs>
    ): Prisma__RespostaUsuarioClient<RespostaUsuarioGetPayload<T>>

    /**
     * Count the number of RespostaUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostaUsuarioCountArgs} args - Arguments to filter RespostaUsuarios to count.
     * @example
     * // Count the number of RespostaUsuarios
     * const count = await prisma.respostaUsuario.count({
     *   where: {
     *     // ... the filter for the RespostaUsuarios we want to count
     *   }
     * })
    **/
    count<T extends RespostaUsuarioCountArgs>(
      args?: Subset<T, RespostaUsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RespostaUsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RespostaUsuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostaUsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RespostaUsuarioAggregateArgs>(args: Subset<T, RespostaUsuarioAggregateArgs>): Prisma.PrismaPromise<GetRespostaUsuarioAggregateType<T>>

    /**
     * Group by RespostaUsuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RespostaUsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RespostaUsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RespostaUsuarioGroupByArgs['orderBy'] }
        : { orderBy?: RespostaUsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RespostaUsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRespostaUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for RespostaUsuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RespostaUsuarioClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Usuario<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    Respostas<T extends RespostasArgs= {}>(args?: Subset<T, RespostasArgs>): Prisma__RespostasClient<RespostasGetPayload<T> | Null>;

    Perguntas<T extends PerguntasArgs= {}>(args?: Subset<T, PerguntasArgs>): Prisma__PerguntasClient<PerguntasGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * RespostaUsuario base type for findUnique actions
   */
  export type RespostaUsuarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    /**
     * Filter, which RespostaUsuario to fetch.
     */
    where: RespostaUsuarioWhereUniqueInput
  }

  /**
   * RespostaUsuario findUnique
   */
  export interface RespostaUsuarioFindUniqueArgs extends RespostaUsuarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RespostaUsuario findUniqueOrThrow
   */
  export type RespostaUsuarioFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    /**
     * Filter, which RespostaUsuario to fetch.
     */
    where: RespostaUsuarioWhereUniqueInput
  }


  /**
   * RespostaUsuario base type for findFirst actions
   */
  export type RespostaUsuarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    /**
     * Filter, which RespostaUsuario to fetch.
     */
    where?: RespostaUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RespostaUsuarios to fetch.
     */
    orderBy?: Enumerable<RespostaUsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RespostaUsuarios.
     */
    cursor?: RespostaUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RespostaUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RespostaUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RespostaUsuarios.
     */
    distinct?: Enumerable<RespostaUsuarioScalarFieldEnum>
  }

  /**
   * RespostaUsuario findFirst
   */
  export interface RespostaUsuarioFindFirstArgs extends RespostaUsuarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RespostaUsuario findFirstOrThrow
   */
  export type RespostaUsuarioFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    /**
     * Filter, which RespostaUsuario to fetch.
     */
    where?: RespostaUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RespostaUsuarios to fetch.
     */
    orderBy?: Enumerable<RespostaUsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RespostaUsuarios.
     */
    cursor?: RespostaUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RespostaUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RespostaUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RespostaUsuarios.
     */
    distinct?: Enumerable<RespostaUsuarioScalarFieldEnum>
  }


  /**
   * RespostaUsuario findMany
   */
  export type RespostaUsuarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    /**
     * Filter, which RespostaUsuarios to fetch.
     */
    where?: RespostaUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RespostaUsuarios to fetch.
     */
    orderBy?: Enumerable<RespostaUsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RespostaUsuarios.
     */
    cursor?: RespostaUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RespostaUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RespostaUsuarios.
     */
    skip?: number
    distinct?: Enumerable<RespostaUsuarioScalarFieldEnum>
  }


  /**
   * RespostaUsuario create
   */
  export type RespostaUsuarioCreateArgs = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    /**
     * The data needed to create a RespostaUsuario.
     */
    data: XOR<RespostaUsuarioCreateInput, RespostaUsuarioUncheckedCreateInput>
  }


  /**
   * RespostaUsuario createMany
   */
  export type RespostaUsuarioCreateManyArgs = {
    /**
     * The data used to create many RespostaUsuarios.
     */
    data: Enumerable<RespostaUsuarioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RespostaUsuario update
   */
  export type RespostaUsuarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    /**
     * The data needed to update a RespostaUsuario.
     */
    data: XOR<RespostaUsuarioUpdateInput, RespostaUsuarioUncheckedUpdateInput>
    /**
     * Choose, which RespostaUsuario to update.
     */
    where: RespostaUsuarioWhereUniqueInput
  }


  /**
   * RespostaUsuario updateMany
   */
  export type RespostaUsuarioUpdateManyArgs = {
    /**
     * The data used to update RespostaUsuarios.
     */
    data: XOR<RespostaUsuarioUpdateManyMutationInput, RespostaUsuarioUncheckedUpdateManyInput>
    /**
     * Filter which RespostaUsuarios to update
     */
    where?: RespostaUsuarioWhereInput
  }


  /**
   * RespostaUsuario upsert
   */
  export type RespostaUsuarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    /**
     * The filter to search for the RespostaUsuario to update in case it exists.
     */
    where: RespostaUsuarioWhereUniqueInput
    /**
     * In case the RespostaUsuario found by the `where` argument doesn't exist, create a new RespostaUsuario with this data.
     */
    create: XOR<RespostaUsuarioCreateInput, RespostaUsuarioUncheckedCreateInput>
    /**
     * In case the RespostaUsuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RespostaUsuarioUpdateInput, RespostaUsuarioUncheckedUpdateInput>
  }


  /**
   * RespostaUsuario delete
   */
  export type RespostaUsuarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    /**
     * Filter which RespostaUsuario to delete.
     */
    where: RespostaUsuarioWhereUniqueInput
  }


  /**
   * RespostaUsuario deleteMany
   */
  export type RespostaUsuarioDeleteManyArgs = {
    /**
     * Filter which RespostaUsuarios to delete
     */
    where?: RespostaUsuarioWhereInput
  }


  /**
   * RespostaUsuario without action
   */
  export type RespostaUsuarioArgs = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
  }



  /**
   * Model Usuario
   */


  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    email: string | null
    senha: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    email: string | null
    senha: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    email: number
    senha: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    email?: true
    senha?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    email?: true
    senha?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    _all?: true
  }

  export type UsuarioAggregateArgs = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs = {
    where?: UsuarioWhereInput
    orderBy?: Enumerable<UsuarioOrderByWithAggregationInput>
    by: UsuarioScalarFieldEnum[]
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }


  export type UsuarioGroupByOutputType = {
    id: number
    email: string
    senha: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect = {
    id?: boolean
    email?: boolean
    senha?: boolean
    respostaUsuario?: boolean | Usuario$respostaUsuarioArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }


  export type UsuarioInclude = {
    respostaUsuario?: boolean | Usuario$respostaUsuarioArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }

  export type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Usuario :
    S extends undefined ? never :
    S extends { include: any } & (UsuarioArgs | UsuarioFindManyArgs)
    ? Usuario  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'respostaUsuario' ? Array < RespostaUsuarioGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UsuarioArgs | UsuarioFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'respostaUsuario' ? Array < RespostaUsuarioGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Usuario ? Usuario[P] : never
  } 
      : Usuario


  type UsuarioCountArgs = 
    Omit<UsuarioFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsuarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Usuario'> extends True ? Prisma__UsuarioClient<UsuarioGetPayload<T>> : Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsuarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Usuario'> extends True ? Prisma__UsuarioClient<UsuarioGetPayload<T>> : Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>

    /**
     * Find the first Usuario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs>(
      args?: SelectSubset<T, UsuarioFindManyArgs>
    ): Prisma.PrismaPromise<Array<UsuarioGetPayload<T>>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs>(
      args: SelectSubset<T, UsuarioCreateArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Create many Usuarios.
     *     @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioCreateManyArgs>(
      args?: SelectSubset<T, UsuarioCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs>(
      args: SelectSubset<T, UsuarioDeleteArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs>(
      args: SelectSubset<T, UsuarioUpdateArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs>(
      args: SelectSubset<T, UsuarioUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs>(
      args: SelectSubset<T, UsuarioUpsertArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsuarioClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    respostaUsuario<T extends Usuario$respostaUsuarioArgs= {}>(args?: Subset<T, Usuario$respostaUsuarioArgs>): Prisma.PrismaPromise<Array<RespostaUsuarioGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Usuario base type for findUnique actions
   */
  export type UsuarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUnique
   */
  export interface UsuarioFindUniqueArgs extends UsuarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario base type for findFirst actions
   */
  export type UsuarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }

  /**
   * Usuario findFirst
   */
  export interface UsuarioFindFirstArgs extends UsuarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario create
   */
  export type UsuarioCreateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }


  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs = {
    /**
     * The data used to create many Usuarios.
     */
    data: Enumerable<UsuarioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }


  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario.respostaUsuario
   */
  export type Usuario$respostaUsuarioArgs = {
    /**
     * Select specific fields to fetch from the RespostaUsuario
     */
    select?: RespostaUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RespostaUsuarioInclude | null
    where?: RespostaUsuarioWhereInput
    orderBy?: Enumerable<RespostaUsuarioOrderByWithRelationInput>
    cursor?: RespostaUsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RespostaUsuarioScalarFieldEnum>
  }


  /**
   * Usuario without action
   */
  export type UsuarioArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
  }



  /**
   * Enums
   */

  export const EventoScalarFieldEnum: {
    id: 'id',
    nomeEvento: 'nomeEvento',
    descricao: 'descricao',
    organizadorEmail: 'organizadorEmail'
  };

  export type EventoScalarFieldEnum = (typeof EventoScalarFieldEnum)[keyof typeof EventoScalarFieldEnum]


  export const OrganizadorScalarFieldEnum: {
    id: 'id',
    email: 'email',
    senha: 'senha'
  };

  export type OrganizadorScalarFieldEnum = (typeof OrganizadorScalarFieldEnum)[keyof typeof OrganizadorScalarFieldEnum]


  export const PerguntasScalarFieldEnum: {
    id: 'id',
    pergunta: 'pergunta',
    eventoId: 'eventoId'
  };

  export type PerguntasScalarFieldEnum = (typeof PerguntasScalarFieldEnum)[keyof typeof PerguntasScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RespostaUsuarioScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    respostasId: 'respostasId',
    perguntasId: 'perguntasId'
  };

  export type RespostaUsuarioScalarFieldEnum = (typeof RespostaUsuarioScalarFieldEnum)[keyof typeof RespostaUsuarioScalarFieldEnum]


  export const RespostasScalarFieldEnum: {
    id: 'id',
    resposta: 'resposta',
    perguntasId: 'perguntasId'
  };

  export type RespostasScalarFieldEnum = (typeof RespostasScalarFieldEnum)[keyof typeof RespostasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    email: 'email',
    senha: 'senha'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type OrganizadorWhereInput = {
    AND?: Enumerable<OrganizadorWhereInput>
    OR?: Enumerable<OrganizadorWhereInput>
    NOT?: Enumerable<OrganizadorWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    senha?: StringFilter | string
    evento?: EventoListRelationFilter
  }

  export type OrganizadorOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    evento?: EventoOrderByRelationAggregateInput
  }

  export type OrganizadorWhereUniqueInput = {
    email?: string
  }

  export type OrganizadorOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    _count?: OrganizadorCountOrderByAggregateInput
    _avg?: OrganizadorAvgOrderByAggregateInput
    _max?: OrganizadorMaxOrderByAggregateInput
    _min?: OrganizadorMinOrderByAggregateInput
    _sum?: OrganizadorSumOrderByAggregateInput
  }

  export type OrganizadorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrganizadorScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrganizadorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrganizadorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    senha?: StringWithAggregatesFilter | string
  }

  export type EventoWhereInput = {
    AND?: Enumerable<EventoWhereInput>
    OR?: Enumerable<EventoWhereInput>
    NOT?: Enumerable<EventoWhereInput>
    id?: IntFilter | number
    nomeEvento?: StringFilter | string
    descricao?: StringNullableFilter | string | null
    organizadorEmail?: StringNullableFilter | string | null
    pergunta?: PerguntasListRelationFilter
    Organizador?: XOR<OrganizadorRelationFilter, OrganizadorWhereInput> | null
  }

  export type EventoOrderByWithRelationInput = {
    id?: SortOrder
    nomeEvento?: SortOrder
    descricao?: SortOrder
    organizadorEmail?: SortOrder
    pergunta?: PerguntasOrderByRelationAggregateInput
    Organizador?: OrganizadorOrderByWithRelationInput
  }

  export type EventoWhereUniqueInput = {
    id?: number
  }

  export type EventoOrderByWithAggregationInput = {
    id?: SortOrder
    nomeEvento?: SortOrder
    descricao?: SortOrder
    organizadorEmail?: SortOrder
    _count?: EventoCountOrderByAggregateInput
    _avg?: EventoAvgOrderByAggregateInput
    _max?: EventoMaxOrderByAggregateInput
    _min?: EventoMinOrderByAggregateInput
    _sum?: EventoSumOrderByAggregateInput
  }

  export type EventoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EventoScalarWhereWithAggregatesInput>
    OR?: Enumerable<EventoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EventoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nomeEvento?: StringWithAggregatesFilter | string
    descricao?: StringNullableWithAggregatesFilter | string | null
    organizadorEmail?: StringNullableWithAggregatesFilter | string | null
  }

  export type PerguntasWhereInput = {
    AND?: Enumerable<PerguntasWhereInput>
    OR?: Enumerable<PerguntasWhereInput>
    NOT?: Enumerable<PerguntasWhereInput>
    id?: IntFilter | number
    pergunta?: StringFilter | string
    eventoId?: IntNullableFilter | number | null
    respostaUsuario?: RespostaUsuarioListRelationFilter
    resposta?: RespostasListRelationFilter
    Evento?: XOR<EventoRelationFilter, EventoWhereInput> | null
  }

  export type PerguntasOrderByWithRelationInput = {
    id?: SortOrder
    pergunta?: SortOrder
    eventoId?: SortOrder
    respostaUsuario?: RespostaUsuarioOrderByRelationAggregateInput
    resposta?: RespostasOrderByRelationAggregateInput
    Evento?: EventoOrderByWithRelationInput
  }

  export type PerguntasWhereUniqueInput = {
    id?: number
  }

  export type PerguntasOrderByWithAggregationInput = {
    id?: SortOrder
    pergunta?: SortOrder
    eventoId?: SortOrder
    _count?: PerguntasCountOrderByAggregateInput
    _avg?: PerguntasAvgOrderByAggregateInput
    _max?: PerguntasMaxOrderByAggregateInput
    _min?: PerguntasMinOrderByAggregateInput
    _sum?: PerguntasSumOrderByAggregateInput
  }

  export type PerguntasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PerguntasScalarWhereWithAggregatesInput>
    OR?: Enumerable<PerguntasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PerguntasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    pergunta?: StringWithAggregatesFilter | string
    eventoId?: IntNullableWithAggregatesFilter | number | null
  }

  export type RespostasWhereInput = {
    AND?: Enumerable<RespostasWhereInput>
    OR?: Enumerable<RespostasWhereInput>
    NOT?: Enumerable<RespostasWhereInput>
    id?: IntFilter | number
    resposta?: StringFilter | string
    perguntasId?: IntNullableFilter | number | null
    respostaUsuario?: RespostaUsuarioListRelationFilter
    Perguntas?: XOR<PerguntasRelationFilter, PerguntasWhereInput> | null
  }

  export type RespostasOrderByWithRelationInput = {
    id?: SortOrder
    resposta?: SortOrder
    perguntasId?: SortOrder
    respostaUsuario?: RespostaUsuarioOrderByRelationAggregateInput
    Perguntas?: PerguntasOrderByWithRelationInput
  }

  export type RespostasWhereUniqueInput = {
    id?: number
  }

  export type RespostasOrderByWithAggregationInput = {
    id?: SortOrder
    resposta?: SortOrder
    perguntasId?: SortOrder
    _count?: RespostasCountOrderByAggregateInput
    _avg?: RespostasAvgOrderByAggregateInput
    _max?: RespostasMaxOrderByAggregateInput
    _min?: RespostasMinOrderByAggregateInput
    _sum?: RespostasSumOrderByAggregateInput
  }

  export type RespostasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RespostasScalarWhereWithAggregatesInput>
    OR?: Enumerable<RespostasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RespostasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    resposta?: StringWithAggregatesFilter | string
    perguntasId?: IntNullableWithAggregatesFilter | number | null
  }

  export type RespostaUsuarioWhereInput = {
    AND?: Enumerable<RespostaUsuarioWhereInput>
    OR?: Enumerable<RespostaUsuarioWhereInput>
    NOT?: Enumerable<RespostaUsuarioWhereInput>
    id?: IntFilter | number
    usuarioId?: IntNullableFilter | number | null
    respostasId?: IntNullableFilter | number | null
    perguntasId?: IntNullableFilter | number | null
    Usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput> | null
    Respostas?: XOR<RespostasRelationFilter, RespostasWhereInput> | null
    Perguntas?: XOR<PerguntasRelationFilter, PerguntasWhereInput> | null
  }

  export type RespostaUsuarioOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    respostasId?: SortOrder
    perguntasId?: SortOrder
    Usuario?: UsuarioOrderByWithRelationInput
    Respostas?: RespostasOrderByWithRelationInput
    Perguntas?: PerguntasOrderByWithRelationInput
  }

  export type RespostaUsuarioWhereUniqueInput = {
    id?: number
  }

  export type RespostaUsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    respostasId?: SortOrder
    perguntasId?: SortOrder
    _count?: RespostaUsuarioCountOrderByAggregateInput
    _avg?: RespostaUsuarioAvgOrderByAggregateInput
    _max?: RespostaUsuarioMaxOrderByAggregateInput
    _min?: RespostaUsuarioMinOrderByAggregateInput
    _sum?: RespostaUsuarioSumOrderByAggregateInput
  }

  export type RespostaUsuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RespostaUsuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<RespostaUsuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RespostaUsuarioScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    usuarioId?: IntNullableWithAggregatesFilter | number | null
    respostasId?: IntNullableWithAggregatesFilter | number | null
    perguntasId?: IntNullableWithAggregatesFilter | number | null
  }

  export type UsuarioWhereInput = {
    AND?: Enumerable<UsuarioWhereInput>
    OR?: Enumerable<UsuarioWhereInput>
    NOT?: Enumerable<UsuarioWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    senha?: StringFilter | string
    respostaUsuario?: RespostaUsuarioListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    respostaUsuario?: RespostaUsuarioOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    senha?: StringWithAggregatesFilter | string
  }

  export type OrganizadorCreateInput = {
    id?: number
    email: string
    senha: string
    evento?: EventoCreateNestedManyWithoutOrganizadorInput
  }

  export type OrganizadorUncheckedCreateInput = {
    id?: number
    email: string
    senha: string
    evento?: EventoUncheckedCreateNestedManyWithoutOrganizadorInput
  }

  export type OrganizadorUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    evento?: EventoUpdateManyWithoutOrganizadorNestedInput
  }

  export type OrganizadorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    evento?: EventoUncheckedUpdateManyWithoutOrganizadorNestedInput
  }

  export type OrganizadorCreateManyInput = {
    id?: number
    email: string
    senha: string
  }

  export type OrganizadorUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizadorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type EventoCreateInput = {
    nomeEvento: string
    descricao?: string | null
    pergunta?: PerguntasCreateNestedManyWithoutEventoInput
    Organizador?: OrganizadorCreateNestedOneWithoutEventoInput
  }

  export type EventoUncheckedCreateInput = {
    id?: number
    nomeEvento: string
    descricao?: string | null
    organizadorEmail?: string | null
    pergunta?: PerguntasUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoUpdateInput = {
    nomeEvento?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    pergunta?: PerguntasUpdateManyWithoutEventoNestedInput
    Organizador?: OrganizadorUpdateOneWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeEvento?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    organizadorEmail?: NullableStringFieldUpdateOperationsInput | string | null
    pergunta?: PerguntasUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type EventoCreateManyInput = {
    id?: number
    nomeEvento: string
    descricao?: string | null
    organizadorEmail?: string | null
  }

  export type EventoUpdateManyMutationInput = {
    nomeEvento?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeEvento?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    organizadorEmail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PerguntasCreateInput = {
    pergunta: string
    respostaUsuario?: RespostaUsuarioCreateNestedManyWithoutPerguntasInput
    resposta?: RespostasCreateNestedManyWithoutPerguntasInput
    Evento?: EventoCreateNestedOneWithoutPerguntaInput
  }

  export type PerguntasUncheckedCreateInput = {
    id?: number
    pergunta: string
    eventoId?: number | null
    respostaUsuario?: RespostaUsuarioUncheckedCreateNestedManyWithoutPerguntasInput
    resposta?: RespostasUncheckedCreateNestedManyWithoutPerguntasInput
  }

  export type PerguntasUpdateInput = {
    pergunta?: StringFieldUpdateOperationsInput | string
    respostaUsuario?: RespostaUsuarioUpdateManyWithoutPerguntasNestedInput
    resposta?: RespostasUpdateManyWithoutPerguntasNestedInput
    Evento?: EventoUpdateOneWithoutPerguntaNestedInput
  }

  export type PerguntasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pergunta?: StringFieldUpdateOperationsInput | string
    eventoId?: NullableIntFieldUpdateOperationsInput | number | null
    respostaUsuario?: RespostaUsuarioUncheckedUpdateManyWithoutPerguntasNestedInput
    resposta?: RespostasUncheckedUpdateManyWithoutPerguntasNestedInput
  }

  export type PerguntasCreateManyInput = {
    id?: number
    pergunta: string
    eventoId?: number | null
  }

  export type PerguntasUpdateManyMutationInput = {
    pergunta?: StringFieldUpdateOperationsInput | string
  }

  export type PerguntasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pergunta?: StringFieldUpdateOperationsInput | string
    eventoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RespostasCreateInput = {
    resposta: string
    respostaUsuario?: RespostaUsuarioCreateNestedManyWithoutRespostasInput
    Perguntas?: PerguntasCreateNestedOneWithoutRespostaInput
  }

  export type RespostasUncheckedCreateInput = {
    id?: number
    resposta: string
    perguntasId?: number | null
    respostaUsuario?: RespostaUsuarioUncheckedCreateNestedManyWithoutRespostasInput
  }

  export type RespostasUpdateInput = {
    resposta?: StringFieldUpdateOperationsInput | string
    respostaUsuario?: RespostaUsuarioUpdateManyWithoutRespostasNestedInput
    Perguntas?: PerguntasUpdateOneWithoutRespostaNestedInput
  }

  export type RespostasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resposta?: StringFieldUpdateOperationsInput | string
    perguntasId?: NullableIntFieldUpdateOperationsInput | number | null
    respostaUsuario?: RespostaUsuarioUncheckedUpdateManyWithoutRespostasNestedInput
  }

  export type RespostasCreateManyInput = {
    id?: number
    resposta: string
    perguntasId?: number | null
  }

  export type RespostasUpdateManyMutationInput = {
    resposta?: StringFieldUpdateOperationsInput | string
  }

  export type RespostasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resposta?: StringFieldUpdateOperationsInput | string
    perguntasId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RespostaUsuarioCreateInput = {
    Usuario?: UsuarioCreateNestedOneWithoutRespostaUsuarioInput
    Respostas?: RespostasCreateNestedOneWithoutRespostaUsuarioInput
    Perguntas?: PerguntasCreateNestedOneWithoutRespostaUsuarioInput
  }

  export type RespostaUsuarioUncheckedCreateInput = {
    id?: number
    usuarioId?: number | null
    respostasId?: number | null
    perguntasId?: number | null
  }

  export type RespostaUsuarioUpdateInput = {
    Usuario?: UsuarioUpdateOneWithoutRespostaUsuarioNestedInput
    Respostas?: RespostasUpdateOneWithoutRespostaUsuarioNestedInput
    Perguntas?: PerguntasUpdateOneWithoutRespostaUsuarioNestedInput
  }

  export type RespostaUsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    respostasId?: NullableIntFieldUpdateOperationsInput | number | null
    perguntasId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RespostaUsuarioCreateManyInput = {
    id?: number
    usuarioId?: number | null
    respostasId?: number | null
    perguntasId?: number | null
  }

  export type RespostaUsuarioUpdateManyMutationInput = {

  }

  export type RespostaUsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    respostasId?: NullableIntFieldUpdateOperationsInput | number | null
    perguntasId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsuarioCreateInput = {
    email: string
    senha: string
    respostaUsuario?: RespostaUsuarioCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    email: string
    senha: string
    respostaUsuario?: RespostaUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    respostaUsuario?: RespostaUsuarioUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    respostaUsuario?: RespostaUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    email: string
    senha: string
  }

  export type UsuarioUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EventoListRelationFilter = {
    every?: EventoWhereInput
    some?: EventoWhereInput
    none?: EventoWhereInput
  }

  export type EventoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizadorCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type OrganizadorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrganizadorMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type OrganizadorMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type OrganizadorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type PerguntasListRelationFilter = {
    every?: PerguntasWhereInput
    some?: PerguntasWhereInput
    none?: PerguntasWhereInput
  }

  export type OrganizadorRelationFilter = {
    is?: OrganizadorWhereInput | null
    isNot?: OrganizadorWhereInput | null
  }

  export type PerguntasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventoCountOrderByAggregateInput = {
    id?: SortOrder
    nomeEvento?: SortOrder
    descricao?: SortOrder
    organizadorEmail?: SortOrder
  }

  export type EventoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EventoMaxOrderByAggregateInput = {
    id?: SortOrder
    nomeEvento?: SortOrder
    descricao?: SortOrder
    organizadorEmail?: SortOrder
  }

  export type EventoMinOrderByAggregateInput = {
    id?: SortOrder
    nomeEvento?: SortOrder
    descricao?: SortOrder
    organizadorEmail?: SortOrder
  }

  export type EventoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type RespostaUsuarioListRelationFilter = {
    every?: RespostaUsuarioWhereInput
    some?: RespostaUsuarioWhereInput
    none?: RespostaUsuarioWhereInput
  }

  export type RespostasListRelationFilter = {
    every?: RespostasWhereInput
    some?: RespostasWhereInput
    none?: RespostasWhereInput
  }

  export type EventoRelationFilter = {
    is?: EventoWhereInput | null
    isNot?: EventoWhereInput | null
  }

  export type RespostaUsuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RespostasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PerguntasCountOrderByAggregateInput = {
    id?: SortOrder
    pergunta?: SortOrder
    eventoId?: SortOrder
  }

  export type PerguntasAvgOrderByAggregateInput = {
    id?: SortOrder
    eventoId?: SortOrder
  }

  export type PerguntasMaxOrderByAggregateInput = {
    id?: SortOrder
    pergunta?: SortOrder
    eventoId?: SortOrder
  }

  export type PerguntasMinOrderByAggregateInput = {
    id?: SortOrder
    pergunta?: SortOrder
    eventoId?: SortOrder
  }

  export type PerguntasSumOrderByAggregateInput = {
    id?: SortOrder
    eventoId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type PerguntasRelationFilter = {
    is?: PerguntasWhereInput | null
    isNot?: PerguntasWhereInput | null
  }

  export type RespostasCountOrderByAggregateInput = {
    id?: SortOrder
    resposta?: SortOrder
    perguntasId?: SortOrder
  }

  export type RespostasAvgOrderByAggregateInput = {
    id?: SortOrder
    perguntasId?: SortOrder
  }

  export type RespostasMaxOrderByAggregateInput = {
    id?: SortOrder
    resposta?: SortOrder
    perguntasId?: SortOrder
  }

  export type RespostasMinOrderByAggregateInput = {
    id?: SortOrder
    resposta?: SortOrder
    perguntasId?: SortOrder
  }

  export type RespostasSumOrderByAggregateInput = {
    id?: SortOrder
    perguntasId?: SortOrder
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput | null
    isNot?: UsuarioWhereInput | null
  }

  export type RespostasRelationFilter = {
    is?: RespostasWhereInput | null
    isNot?: RespostasWhereInput | null
  }

  export type RespostaUsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    respostasId?: SortOrder
    perguntasId?: SortOrder
  }

  export type RespostaUsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    respostasId?: SortOrder
    perguntasId?: SortOrder
  }

  export type RespostaUsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    respostasId?: SortOrder
    perguntasId?: SortOrder
  }

  export type RespostaUsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    respostasId?: SortOrder
    perguntasId?: SortOrder
  }

  export type RespostaUsuarioSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    respostasId?: SortOrder
    perguntasId?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EventoCreateNestedManyWithoutOrganizadorInput = {
    create?: XOR<Enumerable<EventoCreateWithoutOrganizadorInput>, Enumerable<EventoUncheckedCreateWithoutOrganizadorInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutOrganizadorInput>
    createMany?: EventoCreateManyOrganizadorInputEnvelope
    connect?: Enumerable<EventoWhereUniqueInput>
  }

  export type EventoUncheckedCreateNestedManyWithoutOrganizadorInput = {
    create?: XOR<Enumerable<EventoCreateWithoutOrganizadorInput>, Enumerable<EventoUncheckedCreateWithoutOrganizadorInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutOrganizadorInput>
    createMany?: EventoCreateManyOrganizadorInputEnvelope
    connect?: Enumerable<EventoWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EventoUpdateManyWithoutOrganizadorNestedInput = {
    create?: XOR<Enumerable<EventoCreateWithoutOrganizadorInput>, Enumerable<EventoUncheckedCreateWithoutOrganizadorInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutOrganizadorInput>
    upsert?: Enumerable<EventoUpsertWithWhereUniqueWithoutOrganizadorInput>
    createMany?: EventoCreateManyOrganizadorInputEnvelope
    set?: Enumerable<EventoWhereUniqueInput>
    disconnect?: Enumerable<EventoWhereUniqueInput>
    delete?: Enumerable<EventoWhereUniqueInput>
    connect?: Enumerable<EventoWhereUniqueInput>
    update?: Enumerable<EventoUpdateWithWhereUniqueWithoutOrganizadorInput>
    updateMany?: Enumerable<EventoUpdateManyWithWhereWithoutOrganizadorInput>
    deleteMany?: Enumerable<EventoScalarWhereInput>
  }

  export type EventoUncheckedUpdateManyWithoutOrganizadorNestedInput = {
    create?: XOR<Enumerable<EventoCreateWithoutOrganizadorInput>, Enumerable<EventoUncheckedCreateWithoutOrganizadorInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutOrganizadorInput>
    upsert?: Enumerable<EventoUpsertWithWhereUniqueWithoutOrganizadorInput>
    createMany?: EventoCreateManyOrganizadorInputEnvelope
    set?: Enumerable<EventoWhereUniqueInput>
    disconnect?: Enumerable<EventoWhereUniqueInput>
    delete?: Enumerable<EventoWhereUniqueInput>
    connect?: Enumerable<EventoWhereUniqueInput>
    update?: Enumerable<EventoUpdateWithWhereUniqueWithoutOrganizadorInput>
    updateMany?: Enumerable<EventoUpdateManyWithWhereWithoutOrganizadorInput>
    deleteMany?: Enumerable<EventoScalarWhereInput>
  }

  export type PerguntasCreateNestedManyWithoutEventoInput = {
    create?: XOR<Enumerable<PerguntasCreateWithoutEventoInput>, Enumerable<PerguntasUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<PerguntasCreateOrConnectWithoutEventoInput>
    createMany?: PerguntasCreateManyEventoInputEnvelope
    connect?: Enumerable<PerguntasWhereUniqueInput>
  }

  export type OrganizadorCreateNestedOneWithoutEventoInput = {
    create?: XOR<OrganizadorCreateWithoutEventoInput, OrganizadorUncheckedCreateWithoutEventoInput>
    connectOrCreate?: OrganizadorCreateOrConnectWithoutEventoInput
    connect?: OrganizadorWhereUniqueInput
  }

  export type PerguntasUncheckedCreateNestedManyWithoutEventoInput = {
    create?: XOR<Enumerable<PerguntasCreateWithoutEventoInput>, Enumerable<PerguntasUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<PerguntasCreateOrConnectWithoutEventoInput>
    createMany?: PerguntasCreateManyEventoInputEnvelope
    connect?: Enumerable<PerguntasWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PerguntasUpdateManyWithoutEventoNestedInput = {
    create?: XOR<Enumerable<PerguntasCreateWithoutEventoInput>, Enumerable<PerguntasUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<PerguntasCreateOrConnectWithoutEventoInput>
    upsert?: Enumerable<PerguntasUpsertWithWhereUniqueWithoutEventoInput>
    createMany?: PerguntasCreateManyEventoInputEnvelope
    set?: Enumerable<PerguntasWhereUniqueInput>
    disconnect?: Enumerable<PerguntasWhereUniqueInput>
    delete?: Enumerable<PerguntasWhereUniqueInput>
    connect?: Enumerable<PerguntasWhereUniqueInput>
    update?: Enumerable<PerguntasUpdateWithWhereUniqueWithoutEventoInput>
    updateMany?: Enumerable<PerguntasUpdateManyWithWhereWithoutEventoInput>
    deleteMany?: Enumerable<PerguntasScalarWhereInput>
  }

  export type OrganizadorUpdateOneWithoutEventoNestedInput = {
    create?: XOR<OrganizadorCreateWithoutEventoInput, OrganizadorUncheckedCreateWithoutEventoInput>
    connectOrCreate?: OrganizadorCreateOrConnectWithoutEventoInput
    upsert?: OrganizadorUpsertWithoutEventoInput
    disconnect?: boolean
    delete?: boolean
    connect?: OrganizadorWhereUniqueInput
    update?: XOR<OrganizadorUpdateWithoutEventoInput, OrganizadorUncheckedUpdateWithoutEventoInput>
  }

  export type PerguntasUncheckedUpdateManyWithoutEventoNestedInput = {
    create?: XOR<Enumerable<PerguntasCreateWithoutEventoInput>, Enumerable<PerguntasUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<PerguntasCreateOrConnectWithoutEventoInput>
    upsert?: Enumerable<PerguntasUpsertWithWhereUniqueWithoutEventoInput>
    createMany?: PerguntasCreateManyEventoInputEnvelope
    set?: Enumerable<PerguntasWhereUniqueInput>
    disconnect?: Enumerable<PerguntasWhereUniqueInput>
    delete?: Enumerable<PerguntasWhereUniqueInput>
    connect?: Enumerable<PerguntasWhereUniqueInput>
    update?: Enumerable<PerguntasUpdateWithWhereUniqueWithoutEventoInput>
    updateMany?: Enumerable<PerguntasUpdateManyWithWhereWithoutEventoInput>
    deleteMany?: Enumerable<PerguntasScalarWhereInput>
  }

  export type RespostaUsuarioCreateNestedManyWithoutPerguntasInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutPerguntasInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutPerguntasInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutPerguntasInput>
    createMany?: RespostaUsuarioCreateManyPerguntasInputEnvelope
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
  }

  export type RespostasCreateNestedManyWithoutPerguntasInput = {
    create?: XOR<Enumerable<RespostasCreateWithoutPerguntasInput>, Enumerable<RespostasUncheckedCreateWithoutPerguntasInput>>
    connectOrCreate?: Enumerable<RespostasCreateOrConnectWithoutPerguntasInput>
    createMany?: RespostasCreateManyPerguntasInputEnvelope
    connect?: Enumerable<RespostasWhereUniqueInput>
  }

  export type EventoCreateNestedOneWithoutPerguntaInput = {
    create?: XOR<EventoCreateWithoutPerguntaInput, EventoUncheckedCreateWithoutPerguntaInput>
    connectOrCreate?: EventoCreateOrConnectWithoutPerguntaInput
    connect?: EventoWhereUniqueInput
  }

  export type RespostaUsuarioUncheckedCreateNestedManyWithoutPerguntasInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutPerguntasInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutPerguntasInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutPerguntasInput>
    createMany?: RespostaUsuarioCreateManyPerguntasInputEnvelope
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
  }

  export type RespostasUncheckedCreateNestedManyWithoutPerguntasInput = {
    create?: XOR<Enumerable<RespostasCreateWithoutPerguntasInput>, Enumerable<RespostasUncheckedCreateWithoutPerguntasInput>>
    connectOrCreate?: Enumerable<RespostasCreateOrConnectWithoutPerguntasInput>
    createMany?: RespostasCreateManyPerguntasInputEnvelope
    connect?: Enumerable<RespostasWhereUniqueInput>
  }

  export type RespostaUsuarioUpdateManyWithoutPerguntasNestedInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutPerguntasInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutPerguntasInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutPerguntasInput>
    upsert?: Enumerable<RespostaUsuarioUpsertWithWhereUniqueWithoutPerguntasInput>
    createMany?: RespostaUsuarioCreateManyPerguntasInputEnvelope
    set?: Enumerable<RespostaUsuarioWhereUniqueInput>
    disconnect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    delete?: Enumerable<RespostaUsuarioWhereUniqueInput>
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    update?: Enumerable<RespostaUsuarioUpdateWithWhereUniqueWithoutPerguntasInput>
    updateMany?: Enumerable<RespostaUsuarioUpdateManyWithWhereWithoutPerguntasInput>
    deleteMany?: Enumerable<RespostaUsuarioScalarWhereInput>
  }

  export type RespostasUpdateManyWithoutPerguntasNestedInput = {
    create?: XOR<Enumerable<RespostasCreateWithoutPerguntasInput>, Enumerable<RespostasUncheckedCreateWithoutPerguntasInput>>
    connectOrCreate?: Enumerable<RespostasCreateOrConnectWithoutPerguntasInput>
    upsert?: Enumerable<RespostasUpsertWithWhereUniqueWithoutPerguntasInput>
    createMany?: RespostasCreateManyPerguntasInputEnvelope
    set?: Enumerable<RespostasWhereUniqueInput>
    disconnect?: Enumerable<RespostasWhereUniqueInput>
    delete?: Enumerable<RespostasWhereUniqueInput>
    connect?: Enumerable<RespostasWhereUniqueInput>
    update?: Enumerable<RespostasUpdateWithWhereUniqueWithoutPerguntasInput>
    updateMany?: Enumerable<RespostasUpdateManyWithWhereWithoutPerguntasInput>
    deleteMany?: Enumerable<RespostasScalarWhereInput>
  }

  export type EventoUpdateOneWithoutPerguntaNestedInput = {
    create?: XOR<EventoCreateWithoutPerguntaInput, EventoUncheckedCreateWithoutPerguntaInput>
    connectOrCreate?: EventoCreateOrConnectWithoutPerguntaInput
    upsert?: EventoUpsertWithoutPerguntaInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventoWhereUniqueInput
    update?: XOR<EventoUpdateWithoutPerguntaInput, EventoUncheckedUpdateWithoutPerguntaInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RespostaUsuarioUncheckedUpdateManyWithoutPerguntasNestedInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutPerguntasInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutPerguntasInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutPerguntasInput>
    upsert?: Enumerable<RespostaUsuarioUpsertWithWhereUniqueWithoutPerguntasInput>
    createMany?: RespostaUsuarioCreateManyPerguntasInputEnvelope
    set?: Enumerable<RespostaUsuarioWhereUniqueInput>
    disconnect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    delete?: Enumerable<RespostaUsuarioWhereUniqueInput>
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    update?: Enumerable<RespostaUsuarioUpdateWithWhereUniqueWithoutPerguntasInput>
    updateMany?: Enumerable<RespostaUsuarioUpdateManyWithWhereWithoutPerguntasInput>
    deleteMany?: Enumerable<RespostaUsuarioScalarWhereInput>
  }

  export type RespostasUncheckedUpdateManyWithoutPerguntasNestedInput = {
    create?: XOR<Enumerable<RespostasCreateWithoutPerguntasInput>, Enumerable<RespostasUncheckedCreateWithoutPerguntasInput>>
    connectOrCreate?: Enumerable<RespostasCreateOrConnectWithoutPerguntasInput>
    upsert?: Enumerable<RespostasUpsertWithWhereUniqueWithoutPerguntasInput>
    createMany?: RespostasCreateManyPerguntasInputEnvelope
    set?: Enumerable<RespostasWhereUniqueInput>
    disconnect?: Enumerable<RespostasWhereUniqueInput>
    delete?: Enumerable<RespostasWhereUniqueInput>
    connect?: Enumerable<RespostasWhereUniqueInput>
    update?: Enumerable<RespostasUpdateWithWhereUniqueWithoutPerguntasInput>
    updateMany?: Enumerable<RespostasUpdateManyWithWhereWithoutPerguntasInput>
    deleteMany?: Enumerable<RespostasScalarWhereInput>
  }

  export type RespostaUsuarioCreateNestedManyWithoutRespostasInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutRespostasInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutRespostasInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutRespostasInput>
    createMany?: RespostaUsuarioCreateManyRespostasInputEnvelope
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
  }

  export type PerguntasCreateNestedOneWithoutRespostaInput = {
    create?: XOR<PerguntasCreateWithoutRespostaInput, PerguntasUncheckedCreateWithoutRespostaInput>
    connectOrCreate?: PerguntasCreateOrConnectWithoutRespostaInput
    connect?: PerguntasWhereUniqueInput
  }

  export type RespostaUsuarioUncheckedCreateNestedManyWithoutRespostasInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutRespostasInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutRespostasInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutRespostasInput>
    createMany?: RespostaUsuarioCreateManyRespostasInputEnvelope
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
  }

  export type RespostaUsuarioUpdateManyWithoutRespostasNestedInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutRespostasInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutRespostasInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutRespostasInput>
    upsert?: Enumerable<RespostaUsuarioUpsertWithWhereUniqueWithoutRespostasInput>
    createMany?: RespostaUsuarioCreateManyRespostasInputEnvelope
    set?: Enumerable<RespostaUsuarioWhereUniqueInput>
    disconnect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    delete?: Enumerable<RespostaUsuarioWhereUniqueInput>
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    update?: Enumerable<RespostaUsuarioUpdateWithWhereUniqueWithoutRespostasInput>
    updateMany?: Enumerable<RespostaUsuarioUpdateManyWithWhereWithoutRespostasInput>
    deleteMany?: Enumerable<RespostaUsuarioScalarWhereInput>
  }

  export type PerguntasUpdateOneWithoutRespostaNestedInput = {
    create?: XOR<PerguntasCreateWithoutRespostaInput, PerguntasUncheckedCreateWithoutRespostaInput>
    connectOrCreate?: PerguntasCreateOrConnectWithoutRespostaInput
    upsert?: PerguntasUpsertWithoutRespostaInput
    disconnect?: boolean
    delete?: boolean
    connect?: PerguntasWhereUniqueInput
    update?: XOR<PerguntasUpdateWithoutRespostaInput, PerguntasUncheckedUpdateWithoutRespostaInput>
  }

  export type RespostaUsuarioUncheckedUpdateManyWithoutRespostasNestedInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutRespostasInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutRespostasInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutRespostasInput>
    upsert?: Enumerable<RespostaUsuarioUpsertWithWhereUniqueWithoutRespostasInput>
    createMany?: RespostaUsuarioCreateManyRespostasInputEnvelope
    set?: Enumerable<RespostaUsuarioWhereUniqueInput>
    disconnect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    delete?: Enumerable<RespostaUsuarioWhereUniqueInput>
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    update?: Enumerable<RespostaUsuarioUpdateWithWhereUniqueWithoutRespostasInput>
    updateMany?: Enumerable<RespostaUsuarioUpdateManyWithWhereWithoutRespostasInput>
    deleteMany?: Enumerable<RespostaUsuarioScalarWhereInput>
  }

  export type UsuarioCreateNestedOneWithoutRespostaUsuarioInput = {
    create?: XOR<UsuarioCreateWithoutRespostaUsuarioInput, UsuarioUncheckedCreateWithoutRespostaUsuarioInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRespostaUsuarioInput
    connect?: UsuarioWhereUniqueInput
  }

  export type RespostasCreateNestedOneWithoutRespostaUsuarioInput = {
    create?: XOR<RespostasCreateWithoutRespostaUsuarioInput, RespostasUncheckedCreateWithoutRespostaUsuarioInput>
    connectOrCreate?: RespostasCreateOrConnectWithoutRespostaUsuarioInput
    connect?: RespostasWhereUniqueInput
  }

  export type PerguntasCreateNestedOneWithoutRespostaUsuarioInput = {
    create?: XOR<PerguntasCreateWithoutRespostaUsuarioInput, PerguntasUncheckedCreateWithoutRespostaUsuarioInput>
    connectOrCreate?: PerguntasCreateOrConnectWithoutRespostaUsuarioInput
    connect?: PerguntasWhereUniqueInput
  }

  export type UsuarioUpdateOneWithoutRespostaUsuarioNestedInput = {
    create?: XOR<UsuarioCreateWithoutRespostaUsuarioInput, UsuarioUncheckedCreateWithoutRespostaUsuarioInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRespostaUsuarioInput
    upsert?: UsuarioUpsertWithoutRespostaUsuarioInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutRespostaUsuarioInput, UsuarioUncheckedUpdateWithoutRespostaUsuarioInput>
  }

  export type RespostasUpdateOneWithoutRespostaUsuarioNestedInput = {
    create?: XOR<RespostasCreateWithoutRespostaUsuarioInput, RespostasUncheckedCreateWithoutRespostaUsuarioInput>
    connectOrCreate?: RespostasCreateOrConnectWithoutRespostaUsuarioInput
    upsert?: RespostasUpsertWithoutRespostaUsuarioInput
    disconnect?: boolean
    delete?: boolean
    connect?: RespostasWhereUniqueInput
    update?: XOR<RespostasUpdateWithoutRespostaUsuarioInput, RespostasUncheckedUpdateWithoutRespostaUsuarioInput>
  }

  export type PerguntasUpdateOneWithoutRespostaUsuarioNestedInput = {
    create?: XOR<PerguntasCreateWithoutRespostaUsuarioInput, PerguntasUncheckedCreateWithoutRespostaUsuarioInput>
    connectOrCreate?: PerguntasCreateOrConnectWithoutRespostaUsuarioInput
    upsert?: PerguntasUpsertWithoutRespostaUsuarioInput
    disconnect?: boolean
    delete?: boolean
    connect?: PerguntasWhereUniqueInput
    update?: XOR<PerguntasUpdateWithoutRespostaUsuarioInput, PerguntasUncheckedUpdateWithoutRespostaUsuarioInput>
  }

  export type RespostaUsuarioCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutUsuarioInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutUsuarioInput>
    createMany?: RespostaUsuarioCreateManyUsuarioInputEnvelope
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
  }

  export type RespostaUsuarioUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutUsuarioInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutUsuarioInput>
    createMany?: RespostaUsuarioCreateManyUsuarioInputEnvelope
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
  }

  export type RespostaUsuarioUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutUsuarioInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<RespostaUsuarioUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: RespostaUsuarioCreateManyUsuarioInputEnvelope
    set?: Enumerable<RespostaUsuarioWhereUniqueInput>
    disconnect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    delete?: Enumerable<RespostaUsuarioWhereUniqueInput>
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    update?: Enumerable<RespostaUsuarioUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<RespostaUsuarioUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<RespostaUsuarioScalarWhereInput>
  }

  export type RespostaUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<RespostaUsuarioCreateWithoutUsuarioInput>, Enumerable<RespostaUsuarioUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RespostaUsuarioCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<RespostaUsuarioUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: RespostaUsuarioCreateManyUsuarioInputEnvelope
    set?: Enumerable<RespostaUsuarioWhereUniqueInput>
    disconnect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    delete?: Enumerable<RespostaUsuarioWhereUniqueInput>
    connect?: Enumerable<RespostaUsuarioWhereUniqueInput>
    update?: Enumerable<RespostaUsuarioUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<RespostaUsuarioUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<RespostaUsuarioScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type EventoCreateWithoutOrganizadorInput = {
    nomeEvento: string
    descricao?: string | null
    pergunta?: PerguntasCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutOrganizadorInput = {
    id?: number
    nomeEvento: string
    descricao?: string | null
    pergunta?: PerguntasUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutOrganizadorInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutOrganizadorInput, EventoUncheckedCreateWithoutOrganizadorInput>
  }

  export type EventoCreateManyOrganizadorInputEnvelope = {
    data: Enumerable<EventoCreateManyOrganizadorInput>
    skipDuplicates?: boolean
  }

  export type EventoUpsertWithWhereUniqueWithoutOrganizadorInput = {
    where: EventoWhereUniqueInput
    update: XOR<EventoUpdateWithoutOrganizadorInput, EventoUncheckedUpdateWithoutOrganizadorInput>
    create: XOR<EventoCreateWithoutOrganizadorInput, EventoUncheckedCreateWithoutOrganizadorInput>
  }

  export type EventoUpdateWithWhereUniqueWithoutOrganizadorInput = {
    where: EventoWhereUniqueInput
    data: XOR<EventoUpdateWithoutOrganizadorInput, EventoUncheckedUpdateWithoutOrganizadorInput>
  }

  export type EventoUpdateManyWithWhereWithoutOrganizadorInput = {
    where: EventoScalarWhereInput
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyWithoutEventoInput>
  }

  export type EventoScalarWhereInput = {
    AND?: Enumerable<EventoScalarWhereInput>
    OR?: Enumerable<EventoScalarWhereInput>
    NOT?: Enumerable<EventoScalarWhereInput>
    id?: IntFilter | number
    nomeEvento?: StringFilter | string
    descricao?: StringNullableFilter | string | null
    organizadorEmail?: StringNullableFilter | string | null
  }

  export type PerguntasCreateWithoutEventoInput = {
    pergunta: string
    respostaUsuario?: RespostaUsuarioCreateNestedManyWithoutPerguntasInput
    resposta?: RespostasCreateNestedManyWithoutPerguntasInput
  }

  export type PerguntasUncheckedCreateWithoutEventoInput = {
    id?: number
    pergunta: string
    respostaUsuario?: RespostaUsuarioUncheckedCreateNestedManyWithoutPerguntasInput
    resposta?: RespostasUncheckedCreateNestedManyWithoutPerguntasInput
  }

  export type PerguntasCreateOrConnectWithoutEventoInput = {
    where: PerguntasWhereUniqueInput
    create: XOR<PerguntasCreateWithoutEventoInput, PerguntasUncheckedCreateWithoutEventoInput>
  }

  export type PerguntasCreateManyEventoInputEnvelope = {
    data: Enumerable<PerguntasCreateManyEventoInput>
    skipDuplicates?: boolean
  }

  export type OrganizadorCreateWithoutEventoInput = {
    id?: number
    email: string
    senha: string
  }

  export type OrganizadorUncheckedCreateWithoutEventoInput = {
    id?: number
    email: string
    senha: string
  }

  export type OrganizadorCreateOrConnectWithoutEventoInput = {
    where: OrganizadorWhereUniqueInput
    create: XOR<OrganizadorCreateWithoutEventoInput, OrganizadorUncheckedCreateWithoutEventoInput>
  }

  export type PerguntasUpsertWithWhereUniqueWithoutEventoInput = {
    where: PerguntasWhereUniqueInput
    update: XOR<PerguntasUpdateWithoutEventoInput, PerguntasUncheckedUpdateWithoutEventoInput>
    create: XOR<PerguntasCreateWithoutEventoInput, PerguntasUncheckedCreateWithoutEventoInput>
  }

  export type PerguntasUpdateWithWhereUniqueWithoutEventoInput = {
    where: PerguntasWhereUniqueInput
    data: XOR<PerguntasUpdateWithoutEventoInput, PerguntasUncheckedUpdateWithoutEventoInput>
  }

  export type PerguntasUpdateManyWithWhereWithoutEventoInput = {
    where: PerguntasScalarWhereInput
    data: XOR<PerguntasUpdateManyMutationInput, PerguntasUncheckedUpdateManyWithoutPerguntaInput>
  }

  export type PerguntasScalarWhereInput = {
    AND?: Enumerable<PerguntasScalarWhereInput>
    OR?: Enumerable<PerguntasScalarWhereInput>
    NOT?: Enumerable<PerguntasScalarWhereInput>
    id?: IntFilter | number
    pergunta?: StringFilter | string
    eventoId?: IntNullableFilter | number | null
  }

  export type OrganizadorUpsertWithoutEventoInput = {
    update: XOR<OrganizadorUpdateWithoutEventoInput, OrganizadorUncheckedUpdateWithoutEventoInput>
    create: XOR<OrganizadorCreateWithoutEventoInput, OrganizadorUncheckedCreateWithoutEventoInput>
  }

  export type OrganizadorUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizadorUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type RespostaUsuarioCreateWithoutPerguntasInput = {
    Usuario?: UsuarioCreateNestedOneWithoutRespostaUsuarioInput
    Respostas?: RespostasCreateNestedOneWithoutRespostaUsuarioInput
  }

  export type RespostaUsuarioUncheckedCreateWithoutPerguntasInput = {
    id?: number
    usuarioId?: number | null
    respostasId?: number | null
  }

  export type RespostaUsuarioCreateOrConnectWithoutPerguntasInput = {
    where: RespostaUsuarioWhereUniqueInput
    create: XOR<RespostaUsuarioCreateWithoutPerguntasInput, RespostaUsuarioUncheckedCreateWithoutPerguntasInput>
  }

  export type RespostaUsuarioCreateManyPerguntasInputEnvelope = {
    data: Enumerable<RespostaUsuarioCreateManyPerguntasInput>
    skipDuplicates?: boolean
  }

  export type RespostasCreateWithoutPerguntasInput = {
    resposta: string
    respostaUsuario?: RespostaUsuarioCreateNestedManyWithoutRespostasInput
  }

  export type RespostasUncheckedCreateWithoutPerguntasInput = {
    id?: number
    resposta: string
    respostaUsuario?: RespostaUsuarioUncheckedCreateNestedManyWithoutRespostasInput
  }

  export type RespostasCreateOrConnectWithoutPerguntasInput = {
    where: RespostasWhereUniqueInput
    create: XOR<RespostasCreateWithoutPerguntasInput, RespostasUncheckedCreateWithoutPerguntasInput>
  }

  export type RespostasCreateManyPerguntasInputEnvelope = {
    data: Enumerable<RespostasCreateManyPerguntasInput>
    skipDuplicates?: boolean
  }

  export type EventoCreateWithoutPerguntaInput = {
    nomeEvento: string
    descricao?: string | null
    Organizador?: OrganizadorCreateNestedOneWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutPerguntaInput = {
    id?: number
    nomeEvento: string
    descricao?: string | null
    organizadorEmail?: string | null
  }

  export type EventoCreateOrConnectWithoutPerguntaInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutPerguntaInput, EventoUncheckedCreateWithoutPerguntaInput>
  }

  export type RespostaUsuarioUpsertWithWhereUniqueWithoutPerguntasInput = {
    where: RespostaUsuarioWhereUniqueInput
    update: XOR<RespostaUsuarioUpdateWithoutPerguntasInput, RespostaUsuarioUncheckedUpdateWithoutPerguntasInput>
    create: XOR<RespostaUsuarioCreateWithoutPerguntasInput, RespostaUsuarioUncheckedCreateWithoutPerguntasInput>
  }

  export type RespostaUsuarioUpdateWithWhereUniqueWithoutPerguntasInput = {
    where: RespostaUsuarioWhereUniqueInput
    data: XOR<RespostaUsuarioUpdateWithoutPerguntasInput, RespostaUsuarioUncheckedUpdateWithoutPerguntasInput>
  }

  export type RespostaUsuarioUpdateManyWithWhereWithoutPerguntasInput = {
    where: RespostaUsuarioScalarWhereInput
    data: XOR<RespostaUsuarioUpdateManyMutationInput, RespostaUsuarioUncheckedUpdateManyWithoutRespostaUsuarioInput>
  }

  export type RespostaUsuarioScalarWhereInput = {
    AND?: Enumerable<RespostaUsuarioScalarWhereInput>
    OR?: Enumerable<RespostaUsuarioScalarWhereInput>
    NOT?: Enumerable<RespostaUsuarioScalarWhereInput>
    id?: IntFilter | number
    usuarioId?: IntNullableFilter | number | null
    respostasId?: IntNullableFilter | number | null
    perguntasId?: IntNullableFilter | number | null
  }

  export type RespostasUpsertWithWhereUniqueWithoutPerguntasInput = {
    where: RespostasWhereUniqueInput
    update: XOR<RespostasUpdateWithoutPerguntasInput, RespostasUncheckedUpdateWithoutPerguntasInput>
    create: XOR<RespostasCreateWithoutPerguntasInput, RespostasUncheckedCreateWithoutPerguntasInput>
  }

  export type RespostasUpdateWithWhereUniqueWithoutPerguntasInput = {
    where: RespostasWhereUniqueInput
    data: XOR<RespostasUpdateWithoutPerguntasInput, RespostasUncheckedUpdateWithoutPerguntasInput>
  }

  export type RespostasUpdateManyWithWhereWithoutPerguntasInput = {
    where: RespostasScalarWhereInput
    data: XOR<RespostasUpdateManyMutationInput, RespostasUncheckedUpdateManyWithoutRespostaInput>
  }

  export type RespostasScalarWhereInput = {
    AND?: Enumerable<RespostasScalarWhereInput>
    OR?: Enumerable<RespostasScalarWhereInput>
    NOT?: Enumerable<RespostasScalarWhereInput>
    id?: IntFilter | number
    resposta?: StringFilter | string
    perguntasId?: IntNullableFilter | number | null
  }

  export type EventoUpsertWithoutPerguntaInput = {
    update: XOR<EventoUpdateWithoutPerguntaInput, EventoUncheckedUpdateWithoutPerguntaInput>
    create: XOR<EventoCreateWithoutPerguntaInput, EventoUncheckedCreateWithoutPerguntaInput>
  }

  export type EventoUpdateWithoutPerguntaInput = {
    nomeEvento?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    Organizador?: OrganizadorUpdateOneWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutPerguntaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeEvento?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    organizadorEmail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RespostaUsuarioCreateWithoutRespostasInput = {
    Usuario?: UsuarioCreateNestedOneWithoutRespostaUsuarioInput
    Perguntas?: PerguntasCreateNestedOneWithoutRespostaUsuarioInput
  }

  export type RespostaUsuarioUncheckedCreateWithoutRespostasInput = {
    id?: number
    usuarioId?: number | null
    perguntasId?: number | null
  }

  export type RespostaUsuarioCreateOrConnectWithoutRespostasInput = {
    where: RespostaUsuarioWhereUniqueInput
    create: XOR<RespostaUsuarioCreateWithoutRespostasInput, RespostaUsuarioUncheckedCreateWithoutRespostasInput>
  }

  export type RespostaUsuarioCreateManyRespostasInputEnvelope = {
    data: Enumerable<RespostaUsuarioCreateManyRespostasInput>
    skipDuplicates?: boolean
  }

  export type PerguntasCreateWithoutRespostaInput = {
    pergunta: string
    respostaUsuario?: RespostaUsuarioCreateNestedManyWithoutPerguntasInput
    Evento?: EventoCreateNestedOneWithoutPerguntaInput
  }

  export type PerguntasUncheckedCreateWithoutRespostaInput = {
    id?: number
    pergunta: string
    eventoId?: number | null
    respostaUsuario?: RespostaUsuarioUncheckedCreateNestedManyWithoutPerguntasInput
  }

  export type PerguntasCreateOrConnectWithoutRespostaInput = {
    where: PerguntasWhereUniqueInput
    create: XOR<PerguntasCreateWithoutRespostaInput, PerguntasUncheckedCreateWithoutRespostaInput>
  }

  export type RespostaUsuarioUpsertWithWhereUniqueWithoutRespostasInput = {
    where: RespostaUsuarioWhereUniqueInput
    update: XOR<RespostaUsuarioUpdateWithoutRespostasInput, RespostaUsuarioUncheckedUpdateWithoutRespostasInput>
    create: XOR<RespostaUsuarioCreateWithoutRespostasInput, RespostaUsuarioUncheckedCreateWithoutRespostasInput>
  }

  export type RespostaUsuarioUpdateWithWhereUniqueWithoutRespostasInput = {
    where: RespostaUsuarioWhereUniqueInput
    data: XOR<RespostaUsuarioUpdateWithoutRespostasInput, RespostaUsuarioUncheckedUpdateWithoutRespostasInput>
  }

  export type RespostaUsuarioUpdateManyWithWhereWithoutRespostasInput = {
    where: RespostaUsuarioScalarWhereInput
    data: XOR<RespostaUsuarioUpdateManyMutationInput, RespostaUsuarioUncheckedUpdateManyWithoutRespostaUsuarioInput>
  }

  export type PerguntasUpsertWithoutRespostaInput = {
    update: XOR<PerguntasUpdateWithoutRespostaInput, PerguntasUncheckedUpdateWithoutRespostaInput>
    create: XOR<PerguntasCreateWithoutRespostaInput, PerguntasUncheckedCreateWithoutRespostaInput>
  }

  export type PerguntasUpdateWithoutRespostaInput = {
    pergunta?: StringFieldUpdateOperationsInput | string
    respostaUsuario?: RespostaUsuarioUpdateManyWithoutPerguntasNestedInput
    Evento?: EventoUpdateOneWithoutPerguntaNestedInput
  }

  export type PerguntasUncheckedUpdateWithoutRespostaInput = {
    id?: IntFieldUpdateOperationsInput | number
    pergunta?: StringFieldUpdateOperationsInput | string
    eventoId?: NullableIntFieldUpdateOperationsInput | number | null
    respostaUsuario?: RespostaUsuarioUncheckedUpdateManyWithoutPerguntasNestedInput
  }

  export type UsuarioCreateWithoutRespostaUsuarioInput = {
    email: string
    senha: string
  }

  export type UsuarioUncheckedCreateWithoutRespostaUsuarioInput = {
    id?: number
    email: string
    senha: string
  }

  export type UsuarioCreateOrConnectWithoutRespostaUsuarioInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutRespostaUsuarioInput, UsuarioUncheckedCreateWithoutRespostaUsuarioInput>
  }

  export type RespostasCreateWithoutRespostaUsuarioInput = {
    resposta: string
    Perguntas?: PerguntasCreateNestedOneWithoutRespostaInput
  }

  export type RespostasUncheckedCreateWithoutRespostaUsuarioInput = {
    id?: number
    resposta: string
    perguntasId?: number | null
  }

  export type RespostasCreateOrConnectWithoutRespostaUsuarioInput = {
    where: RespostasWhereUniqueInput
    create: XOR<RespostasCreateWithoutRespostaUsuarioInput, RespostasUncheckedCreateWithoutRespostaUsuarioInput>
  }

  export type PerguntasCreateWithoutRespostaUsuarioInput = {
    pergunta: string
    resposta?: RespostasCreateNestedManyWithoutPerguntasInput
    Evento?: EventoCreateNestedOneWithoutPerguntaInput
  }

  export type PerguntasUncheckedCreateWithoutRespostaUsuarioInput = {
    id?: number
    pergunta: string
    eventoId?: number | null
    resposta?: RespostasUncheckedCreateNestedManyWithoutPerguntasInput
  }

  export type PerguntasCreateOrConnectWithoutRespostaUsuarioInput = {
    where: PerguntasWhereUniqueInput
    create: XOR<PerguntasCreateWithoutRespostaUsuarioInput, PerguntasUncheckedCreateWithoutRespostaUsuarioInput>
  }

  export type UsuarioUpsertWithoutRespostaUsuarioInput = {
    update: XOR<UsuarioUpdateWithoutRespostaUsuarioInput, UsuarioUncheckedUpdateWithoutRespostaUsuarioInput>
    create: XOR<UsuarioCreateWithoutRespostaUsuarioInput, UsuarioUncheckedCreateWithoutRespostaUsuarioInput>
  }

  export type UsuarioUpdateWithoutRespostaUsuarioInput = {
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateWithoutRespostaUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type RespostasUpsertWithoutRespostaUsuarioInput = {
    update: XOR<RespostasUpdateWithoutRespostaUsuarioInput, RespostasUncheckedUpdateWithoutRespostaUsuarioInput>
    create: XOR<RespostasCreateWithoutRespostaUsuarioInput, RespostasUncheckedCreateWithoutRespostaUsuarioInput>
  }

  export type RespostasUpdateWithoutRespostaUsuarioInput = {
    resposta?: StringFieldUpdateOperationsInput | string
    Perguntas?: PerguntasUpdateOneWithoutRespostaNestedInput
  }

  export type RespostasUncheckedUpdateWithoutRespostaUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    resposta?: StringFieldUpdateOperationsInput | string
    perguntasId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PerguntasUpsertWithoutRespostaUsuarioInput = {
    update: XOR<PerguntasUpdateWithoutRespostaUsuarioInput, PerguntasUncheckedUpdateWithoutRespostaUsuarioInput>
    create: XOR<PerguntasCreateWithoutRespostaUsuarioInput, PerguntasUncheckedCreateWithoutRespostaUsuarioInput>
  }

  export type PerguntasUpdateWithoutRespostaUsuarioInput = {
    pergunta?: StringFieldUpdateOperationsInput | string
    resposta?: RespostasUpdateManyWithoutPerguntasNestedInput
    Evento?: EventoUpdateOneWithoutPerguntaNestedInput
  }

  export type PerguntasUncheckedUpdateWithoutRespostaUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    pergunta?: StringFieldUpdateOperationsInput | string
    eventoId?: NullableIntFieldUpdateOperationsInput | number | null
    resposta?: RespostasUncheckedUpdateManyWithoutPerguntasNestedInput
  }

  export type RespostaUsuarioCreateWithoutUsuarioInput = {
    Respostas?: RespostasCreateNestedOneWithoutRespostaUsuarioInput
    Perguntas?: PerguntasCreateNestedOneWithoutRespostaUsuarioInput
  }

  export type RespostaUsuarioUncheckedCreateWithoutUsuarioInput = {
    id?: number
    respostasId?: number | null
    perguntasId?: number | null
  }

  export type RespostaUsuarioCreateOrConnectWithoutUsuarioInput = {
    where: RespostaUsuarioWhereUniqueInput
    create: XOR<RespostaUsuarioCreateWithoutUsuarioInput, RespostaUsuarioUncheckedCreateWithoutUsuarioInput>
  }

  export type RespostaUsuarioCreateManyUsuarioInputEnvelope = {
    data: Enumerable<RespostaUsuarioCreateManyUsuarioInput>
    skipDuplicates?: boolean
  }

  export type RespostaUsuarioUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: RespostaUsuarioWhereUniqueInput
    update: XOR<RespostaUsuarioUpdateWithoutUsuarioInput, RespostaUsuarioUncheckedUpdateWithoutUsuarioInput>
    create: XOR<RespostaUsuarioCreateWithoutUsuarioInput, RespostaUsuarioUncheckedCreateWithoutUsuarioInput>
  }

  export type RespostaUsuarioUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: RespostaUsuarioWhereUniqueInput
    data: XOR<RespostaUsuarioUpdateWithoutUsuarioInput, RespostaUsuarioUncheckedUpdateWithoutUsuarioInput>
  }

  export type RespostaUsuarioUpdateManyWithWhereWithoutUsuarioInput = {
    where: RespostaUsuarioScalarWhereInput
    data: XOR<RespostaUsuarioUpdateManyMutationInput, RespostaUsuarioUncheckedUpdateManyWithoutRespostaUsuarioInput>
  }

  export type EventoCreateManyOrganizadorInput = {
    id?: number
    nomeEvento: string
    descricao?: string | null
  }

  export type EventoUpdateWithoutOrganizadorInput = {
    nomeEvento?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    pergunta?: PerguntasUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutOrganizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeEvento?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    pergunta?: PerguntasUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateManyWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeEvento?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PerguntasCreateManyEventoInput = {
    id?: number
    pergunta: string
  }

  export type PerguntasUpdateWithoutEventoInput = {
    pergunta?: StringFieldUpdateOperationsInput | string
    respostaUsuario?: RespostaUsuarioUpdateManyWithoutPerguntasNestedInput
    resposta?: RespostasUpdateManyWithoutPerguntasNestedInput
  }

  export type PerguntasUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    pergunta?: StringFieldUpdateOperationsInput | string
    respostaUsuario?: RespostaUsuarioUncheckedUpdateManyWithoutPerguntasNestedInput
    resposta?: RespostasUncheckedUpdateManyWithoutPerguntasNestedInput
  }

  export type PerguntasUncheckedUpdateManyWithoutPerguntaInput = {
    id?: IntFieldUpdateOperationsInput | number
    pergunta?: StringFieldUpdateOperationsInput | string
  }

  export type RespostaUsuarioCreateManyPerguntasInput = {
    id?: number
    usuarioId?: number | null
    respostasId?: number | null
  }

  export type RespostasCreateManyPerguntasInput = {
    id?: number
    resposta: string
  }

  export type RespostaUsuarioUpdateWithoutPerguntasInput = {
    Usuario?: UsuarioUpdateOneWithoutRespostaUsuarioNestedInput
    Respostas?: RespostasUpdateOneWithoutRespostaUsuarioNestedInput
  }

  export type RespostaUsuarioUncheckedUpdateWithoutPerguntasInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    respostasId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RespostaUsuarioUncheckedUpdateManyWithoutRespostaUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    respostasId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RespostasUpdateWithoutPerguntasInput = {
    resposta?: StringFieldUpdateOperationsInput | string
    respostaUsuario?: RespostaUsuarioUpdateManyWithoutRespostasNestedInput
  }

  export type RespostasUncheckedUpdateWithoutPerguntasInput = {
    id?: IntFieldUpdateOperationsInput | number
    resposta?: StringFieldUpdateOperationsInput | string
    respostaUsuario?: RespostaUsuarioUncheckedUpdateManyWithoutRespostasNestedInput
  }

  export type RespostasUncheckedUpdateManyWithoutRespostaInput = {
    id?: IntFieldUpdateOperationsInput | number
    resposta?: StringFieldUpdateOperationsInput | string
  }

  export type RespostaUsuarioCreateManyRespostasInput = {
    id?: number
    usuarioId?: number | null
    perguntasId?: number | null
  }

  export type RespostaUsuarioUpdateWithoutRespostasInput = {
    Usuario?: UsuarioUpdateOneWithoutRespostaUsuarioNestedInput
    Perguntas?: PerguntasUpdateOneWithoutRespostaUsuarioNestedInput
  }

  export type RespostaUsuarioUncheckedUpdateWithoutRespostasInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    perguntasId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RespostaUsuarioCreateManyUsuarioInput = {
    id?: number
    respostasId?: number | null
    perguntasId?: number | null
  }

  export type RespostaUsuarioUpdateWithoutUsuarioInput = {
    Respostas?: RespostasUpdateOneWithoutRespostaUsuarioNestedInput
    Perguntas?: PerguntasUpdateOneWithoutRespostaUsuarioNestedInput
  }

  export type RespostaUsuarioUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    respostasId?: NullableIntFieldUpdateOperationsInput | number | null
    perguntasId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}